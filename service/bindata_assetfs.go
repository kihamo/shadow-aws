// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5d\x4f\xe3\x3a\x10\x7d\xef\xaf\x18\x05\x1e\x6f\x1b\x5d\xdd\x8b\xb4\x8b\xd2\x48\x15\xf0\x80\xf6\xe3\x61\xd9\xdd\x77\x37\x76\x5b\x6b\x8d\x6d\xd9\x6e\x45\x85\xf8\xef\x3b\x76\x92\xd6\x29\x49\x5a\xca\x82\x58\x90\x90\x52\xfb\xcc\xcc\xb1\x7d\xce\xd4\xcd\xfd\x3d\x70\x59\x88\x25\x65\x90\xcc\x8c\x92\x8e\x49\x9a\x40\x22\xc8\x5a\x2d\x5d\xba\x60\x84\x32\x33\x72\x5a\x8c\x16\xee\x56\x24\xf0\xf0\x30\x18\x64\x94\xaf\xc0\x28\xc1\xc6\x89\x23\x53\x4d\x24\x13\x49\x3e\x00\xfc\xcb\x96\x02\x0a\x41\xac\x1d\x27\x92\xac\x00\xff\x87\x88\xb0\xc9\x16\x2d\xb8\x75\x15\x38\x04\x08\x5e\xcd\x69\xc3\x2c\x93\x8e\x38\xae\x64\x52\x27\x21\x85\xe3\x2b\x96\xe4\x19\x81\x85\x61\xb3\x71\x72\x62\x99\x59\xf1\x82\x61\x4a\x62\x38\x19\x16\x48\x18\xe3\x11\xba\x9d\xd8\xd4\x4a\x80\x12\x47\x86\x4e\xcd\xe7\xf5\x48\x7e\x53\xc1\xb2\x94\xe4\x59\x2a\xf8\x5e\x2a\x51\x6d\xa2\xb5\xe0\x45\x18\x7e\x5c\xbf\x39\xd9\xcb\x61\x12\x41\x8f\xe1\xe1\x94\xe6\xc5\x63\x06\xf5\x70\x6f\xed\xef\x01\x74\x4c\x55\xbb\x9c\xda\xc2\x70\xdd\xbe\xfc\x9d\xd9\xfe\x33\x88\xb1\x4d\x2a\x59\xba\x14\xf9\xa0\x7c\xf4\x2a\xab\x74\x80\x61\xa1\x16\xf2\x8a\xc5\xd3\xa2\xc3\x38\xc2\x8f\x40\x25\x21\xe0\x34\xd2\xc8\x36\x47\x4b\x25\xc1\x86\xb8\x05\x1a\xb9\x05\xed\x35\xa0\x01\x1e\x30\x8d\x00\x28\xc3\x16\x6a\xc5\x4c\xf5\x6c\x1d\xae\x90\xd1\x96\xf8\x32\x87\x77\x56\xe7\x5c\x3e\x09\xac\xc1\x6e\xd4\x8a\x63\xed\xe0\xb4\x37\xd3\x54\xd1\x75\xfb\x1c\xfa\xde\x10\x39\x67\x70\x2a\xc9\x2d\xfb\x07\x4e\xab\x5a\x70\x3e\x86\x51\xed\x12\x6f\xf7\xf6\xc4\xa6\x3d\x6b\x39\x49\x73\xcc\x1e\xf2\x62\x02\x64\xd8\x45\x2f\xed\x4a\x83\xe1\xd8\x86\x3a\xab\xa7\x1d\xeb\xc2\x09\xbf\xf7\x3b\xa7\x9b\xe2\xf1\x46\xa2\xd9\xf9\x78\x80\x86\x4a\xf1\x34\x0c\xfe\xa6\x05\x54\xcd\xe7\x27\xdd\xb2\xa9\x21\xd7\x93\x2f\xfb\x41\x51\xbf\x82\xc9\xb7\xaf\xfb\x03\x2e\x98\x71\x7c\xe6\x43\x18\xb0\x3b\xcd\x4d\x88\xdd\x1f\x77\x25\xa9\x56\x5c\xba\x1e\xbd\xd7\xd0\xcf\xc4\x3a\x58\x6a\x6c\x2e\xec\x45\xcd\xc1\xd1\x19\xd1\xc9\x07\x77\xc4\xfd\xfb\x39\x0e\x21\x94\x62\x01\xf8\xb7\xd7\x24\x15\x7e\xa3\x16\x76\xe7\x86\x05\xf6\x41\x66\x3a\x94\xb1\x5d\x03\x9f\x35\xb8\x8f\xae\x2d\x1e\x77\x07\xdf\x4d\x29\x8b\x8a\xaf\x8b\xcd\xc5\x5a\x2f\x38\x36\x5e\xd8\x3c\x0d\xd5\xaf\x04\xac\x5b\x7b\xc3\x14\x4a\x28\x73\x0e\x27\x67\xc5\xf4\xc3\x59\x81\xdf\x15\xa9\x0f\xde\xc7\x8a\x09\xcb\x9e\x4b\xc2\xb0\x5b\xe5\x9b\xfa\x0e\x11\xfa\xf1\xec\xbf\xff\x67\x07\x13\x91\xb4\x87\xc7\xde\x13\x09\x3d\x2e\xde\xde\x89\x91\x87\x9c\xe4\xa3\xb8\xc8\x2d\x57\x1b\xb3\x5c\x7a\xef\x1c\x93\x6d\xe3\xa1\x0b\xb5\x94\x0e\x53\x40\x0a\x9d\x98\x2b\xe9\x5b\x0d\xad\xa1\x4f\xaf\xe6\x6d\xf8\x23\xb8\xf0\xcd\x76\xfa\x23\x5a\x7d\x75\x93\x7a\x2f\x4d\x3e\xdc\xf9\xfa\x3b\xf7\x1f\xea\x94\x61\xe3\x42\x8f\x2c\xef\x99\xaf\xd5\x1d\x83\x2e\x43\xf1\xb2\xf0\x3e\x2b\xfe\x65\x7a\x6c\x5e\xae\xdf\x8b\x2c\xe3\x9f\x01\x87\xdd\x2b\xea\xbe\xf5\xe2\x3a\x8e\x37\xbc\xbc\x10\xc7\x27\xf0\xaa\xaa\x8e\xa9\x34\x68\x3c\xe5\xeb\xa6\x91\xa4\xde\xc5\x37\xeb\x90\xe8\xb1\xf6\x4c\xa6\x1b\x17\x20\xc3\xe7\x8b\xfa\x97\xe0\xcd\xe5\x27\x40\xe5\x5a\x5c\xda\xb9\x27\x37\xc2\x81\x9f\xe5\x67\x4f\x32\x4b\x35\xc6\xf7\xbf\xe5\x98\x29\xe5\x76\xde\x72\xfc\x0e\x00\x00\xff\xff\xf0\x99\x61\xc7\x17\x11\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 4375, mode: os.FileMode(420), modTime: time.Unix(1478462918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
