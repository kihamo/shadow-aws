// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x97\xc1\x6a\xe3\x3c\x10\xc7\xef\x79\x8a\x41\xed\xf1\x4b\xcc\x77\x5d\x1c\x43\x0e\x7b\x5d\x96\xdd\x7d\x81\x89\xa5\x24\x02\x45\x32\x92\x62\x28\xa5\xef\xbe\x63\xd9\x6e\xc6\xa9\xed\x96\x2e\x0d\x21\x85\x82\xa3\xf9\xcf\xcc\xdf\xd2\x4f\x96\xfd\xfc\x0c\xda\x96\xe6\x24\x15\x88\x9d\x77\x36\x2a\x2b\x05\x08\x83\x4f\xee\x14\xb3\x83\x42\xa9\xfc\x2a\x56\x66\x75\x88\x47\x23\xe0\xe5\x65\xb1\xc8\xa5\xae\xc1\x3b\xa3\xd6\x22\xe2\xb6\x42\xab\x8c\x28\x16\x40\x7f\xf9\xc9\x40\x69\x30\x84\xb5\xb0\x58\x03\xfd\x2f\x49\x11\xc4\x59\x6d\x74\x88\x9d\x38\x25\x18\xdd\xc5\x2a\xaf\x82\xb2\x11\xa3\x76\x56\xf4\x45\xb0\x8c\xba\x56\xa2\xc8\x11\x0e\x5e\xed\xd6\xe2\x21\x28\x5f\xeb\x52\x51\x49\xf4\x1a\x97\x25\x19\xa6\x7c\x92\x9e\x03\xaf\xbd\x04\x48\x8c\xb8\x8c\x6e\xbf\xef\x47\x8a\xdf\x9d\x2c\xcf\xb0\xc8\x33\xa3\xdf\xb5\xc2\x9b\x63\x55\x19\x5d\xa6\xf1\xb7\x06\x86\xc1\x59\x13\x1b\x26\xfd\xb0\x11\xe6\x23\xba\x4a\x97\x6f\x1d\xf4\xc3\xb3\xbd\xff\x24\xd1\x67\xba\x86\xd3\x36\x94\x5e\x57\xe3\xb7\x7f\x11\x9d\x5f\x04\xae\x1d\x5a\xc9\xb3\x93\x29\x16\xed\x65\x83\x59\x07\x02\xa5\xa5\x5e\xe4\x8b\xd3\x33\x02\x22\xcf\x68\x46\xa0\x63\x08\xb4\x64\x90\x9c\x6b\x8c\x74\x32\x6a\x49\x53\x50\x91\xb7\x04\xdf\x40\x9a\xe4\x49\x33\x48\x80\x36\xed\xe0\x6a\xe5\xbb\xeb\x10\xe9\x0e\x95\x1c\xc9\x6f\x6b\x34\x5b\x6b\x32\x56\x6c\x92\x6b\x08\xaf\xb8\xd2\xd8\xb8\x38\x9b\xad\xb4\x75\xf2\x69\x3c\x46\x1b\xdf\xa3\xdd\x2b\x78\xb4\x78\x54\xff\xc1\x63\xd7\x0b\xbe\xad\x61\xd5\x6f\x93\x66\xbf\x8f\x17\xf6\xe3\x55\xdb\xa0\x2c\xa8\x7a\xaa\x4b\x05\xc8\xe1\x94\xbd\x6c\xaa\x0c\xa5\xd3\x73\x68\xb2\x7b\x36\x71\x5f\x14\x68\xe6\xfe\x62\x75\x33\x5a\x5e\x06\xcd\xc5\xcf\x0f\x30\xd4\xc2\x33\xd8\xe0\x37\x0d\x50\x17\x2f\x1e\xa6\xb1\xe9\x25\xec\x51\x04\x9b\x5f\x3f\xbe\x94\x33\x4d\x90\xb1\x49\x4c\xa0\xf1\x47\xe1\xbf\xc0\x86\x52\x52\x03\xf8\x7f\x96\x37\xa6\xe7\x46\x56\x3f\x0d\xc6\x9d\xf3\x47\x66\x66\xe3\xed\xcd\xa2\xfb\x09\x76\xbb\xa3\xe1\x5e\xa8\x4d\x87\xd8\x55\x78\x4d\x13\x97\x48\x6d\x0f\xce\xab\x32\x9a\x9a\xb7\x8d\xef\x8c\xc7\xe1\xdb\xc2\xbd\x60\xc9\xdf\x6b\xe6\xe9\xec\x33\xbe\x5b\x59\x39\x6d\xe3\x97\x73\xcc\x27\xbc\x3d\xe1\xf9\x0a\x5c\x95\x6a\x6e\x65\x60\xe3\x3d\xc6\x27\x8b\xf4\xb3\x78\xb3\x3b\x84\x5d\xf6\x7b\x66\xfe\xbb\x6b\xe7\x5c\xbc\xf8\xee\xfa\x1b\x00\x00\xff\xff\x60\x5b\xaa\x0d\xa9\x0d\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 3497, mode: os.FileMode(420), modTime: time.Unix(1447425243, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
