// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5b\x6b\xdb\x30\x14\x7e\xcf\xaf\x10\x6e\xf7\x36\xc7\xec\x52\xd8\x32\xc7\x10\xda\x32\xca\x2e\x8c\x75\xdb\xbb\x62\x29\x89\x98\x22\x19\x49\x4e\x1b\x4a\xff\xfb\x8e\x64\x3b\x91\x53\x5f\xd2\x2b\x5d\x03\x01\x5b\x3a\x97\xef\xe8\x7c\xe7\x48\xf2\xd5\x15\x62\x22\xe5\x39\xa1\x28\x98\x29\x29\x0c\x15\x24\x40\x01\xc7\x6b\x99\x9b\x68\x41\x31\xa1\x6a\x68\x32\x3e\x5c\x98\x25\x0f\xd0\xf5\xf5\x60\x10\x13\xb6\x42\x4a\x72\x3a\x0e\x0c\x9e\x66\x58\x50\x1e\x24\x03\x04\xbf\x38\xe7\x28\xe5\x58\xeb\x71\x20\xf0\x0a\xc1\x3f\x04\x09\x1d\x6c\xa5\x39\xd3\xa6\x14\x76\x0a\x9c\x95\x73\x99\xa2\x9a\x0a\x83\x0d\x93\x22\xa8\x8c\xe0\xd4\xb0\x15\x0d\x92\x18\xa3\x85\xa2\xb3\x71\x70\xa0\xa9\x5a\xb1\x94\x82\x49\xac\x18\x0e\x53\x00\x0c\xfa\x20\xba\x9d\xd8\xf8\x0a\x10\xc1\x06\x87\x46\xce\xe7\xd5\x48\x72\x5e\x8a\xc5\x11\x4e\xe2\x88\xb3\x5e\x28\x9e\x6f\x9c\x65\x9c\xa5\x6e\xf8\xa6\xff\xfa\x64\x27\x86\x89\x27\x7a\x17\x1c\x46\x66\x2c\xbd\x89\xa0\x1a\xee\xf4\xfd\xcb\x09\xdd\xc5\xab\xce\xa7\x3a\x55\x2c\x6b\x0e\x7f\x67\xb6\x3b\x07\xbe\x6c\x1d\x4a\x1c\xe5\x3c\x19\x14\x8f\x96\x65\x25\x0f\x40\xcd\xf9\x02\x5c\x3e\x79\x1a\x78\xe8\x6b\xd8\x11\x54\x52\x08\x31\xe2\x71\x64\x6b\xa3\xc1\x13\xa7\x21\x2c\x41\x06\xd8\x1c\xf7\x6a\xa2\x4e\xdc\xc9\xd4\x14\x50\xa1\xb6\x90\x2b\xaa\xca\x67\x6d\x20\x42\x4a\x1a\xf4\x0b\x1b\xb6\xb2\x5a\xe7\x92\x89\x43\x8d\xf4\x86\xad\x30\xd6\x2c\x1c\x75\x5a\x9a\x4a\xb2\x6e\x9e\x83\xba\x57\x58\xcc\x29\x3a\x14\x78\x49\x5f\xa3\xc3\xd2\x17\x1a\x8d\xd1\xb0\xaa\x12\x5b\xee\xcd\x86\x55\xb3\xd5\x62\x92\x24\x60\xdd\xd9\x05\x03\x80\xb0\x0d\x5e\xd4\x66\x06\xd4\xa1\x0d\xb5\x7a\x8f\x5a\xe2\x82\x09\xbb\xf6\x3b\xd9\x8d\x20\xbd\x1e\x69\x76\x5e\xf7\xe0\x50\x41\x9e\x5a\x81\x3f\x6b\x02\x95\xf3\xc9\x41\x3b\x6d\x2a\x91\xb3\xc9\xb7\x7e\x21\xaf\x5f\xa1\xc9\xcf\xef\xfd\x0a\xc7\x54\x19\x36\xb3\x2a\x14\xd1\xcb\x8c\x29\xa7\xdb\xaf\x77\x2a\x48\x26\x99\x30\x1d\x7c\xaf\x44\xbf\x62\x6d\x50\x9e\x41\x73\xa1\x8f\x5a\x1c\x0c\x2a\xc3\xcb\xbc\xab\x0e\xbf\x7f\xdf\xa7\x42\x30\x21\xe0\x00\xbd\xe9\x2c\x92\x52\x7e\xc3\x16\x7a\x69\xc2\x14\xfa\x20\x55\x2d\xcc\xd8\xc6\xc0\x66\x35\xec\xc3\x33\x0d\xe9\x6e\xc1\xbb\x71\xa5\x81\xf1\x95\xb3\x39\x5f\x67\x0b\x06\x8d\x17\x6d\x9e\x42\xf9\x37\x40\xda\xac\x6d\xc1\xa4\x92\x4b\x35\x42\x07\x47\xe9\xf4\xc3\x51\x0a\x7b\x45\x64\x95\xfb\x50\x51\xae\xe9\x7d\x41\x28\xba\x94\xb6\xa9\xef\x00\x21\x1f\x8f\xde\xbd\x9f\xed\x0d\x44\x90\x0e\x1c\xbd\x19\x71\x3d\xce\x5f\xde\x89\x12\xfb\x64\xf2\x86\x9e\x57\x2d\xa7\x9b\x62\x39\xb1\xb5\xb3\x8f\xb5\xee\x85\xf4\x1a\x53\xa6\xe4\x1c\xda\xd2\x6e\xef\xda\x57\x2d\x9c\x62\x85\xfc\x97\x50\xe7\x69\x6a\xed\x55\x59\x58\x32\x11\x5e\x30\x62\x16\xa3\xb7\x74\xf9\xa9\x78\xda\x8d\xf5\x33\x35\xa7\xc2\xb6\x37\xf2\x83\x2a\x4b\x63\x88\xf1\xd5\x1e\x88\xec\xaf\xdd\xd6\xb1\xcc\x9d\xa5\xfe\xc0\xea\xcd\xff\x7e\xf1\x5f\x60\x25\x98\x98\xdf\x36\xfe\x13\xa6\x1f\x6e\x01\x2a\x63\x0f\xb9\x02\x3d\x22\xb7\x27\xb8\xed\xd5\xbf\x5d\xab\x7e\xb6\xc7\x81\x3b\x9c\x07\xca\xe3\xf6\x4b\x39\x09\xb8\x8b\x41\xf7\xf6\xfe\x40\xdb\xa9\x5b\x38\xb7\x91\x16\x97\x91\xa7\xda\x42\x1d\x2f\x9d\xf3\xc2\x71\x5f\xbf\xfe\xcf\xf8\x58\xbf\x81\xbd\x14\x5a\xfa\x77\xc5\xfd\x0e\x9f\xd5\x21\xf2\xd1\x79\xec\x2f\x78\x71\x6b\xf2\x33\xf0\xa4\xac\xf6\xa1\xd4\x60\xdc\xe6\x4c\x52\x33\x52\xad\xe2\xb3\xad\x10\xef\xb1\xaa\x99\x38\xab\x9d\x92\x15\x9b\x2f\xaa\xcf\x05\xe7\x27\x5f\x10\x30\x57\x43\x68\x23\x0b\x6e\x08\x03\x7f\x8a\x77\x0b\x32\x8e\x32\xd0\xef\xfe\x14\x36\x93\xd2\xec\x7c\x0a\xfb\x17\x00\x00\xff\xff\xe2\xb0\x6e\x29\x3c\x13\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 4924, mode: os.FileMode(420), modTime: time.Unix(1478536536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
