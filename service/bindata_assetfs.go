// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x41\x6b\xe3\x3c\x10\xbd\xe7\x57\x0c\x6a\x8f\x5f\x62\xbe\x6b\x71\x0c\x61\xdb\xd3\xc2\x1e\xb6\xcb\xde\x15\x6b\x92\x08\x54\x49\x48\x4a\x68\x29\xfd\xef\x3b\x96\xed\x44\x4e\x6d\xa7\x9b\xdd\x96\x6c\x03\x01\x5b\xf3\x66\xe6\x69\xf4\x46\x92\x9f\x9f\x41\xea\x52\x6d\x05\x02\x5b\x39\xa3\x03\x6a\xc1\x80\x29\xfe\x64\xb6\x21\xdb\x20\x17\xe8\x66\xc1\xaa\xd9\x26\x3c\x28\x06\x2f\x2f\x93\x49\x2e\xe4\x0e\x9c\x51\x38\x67\x81\x2f\x2d\xd7\xa8\x58\x31\x01\xfa\xe5\x5b\x05\xa5\xe2\xde\xcf\x99\xe6\x3b\xa0\xff\x94\x10\x9e\x1d\xd0\x4a\xfa\xd0\x80\xa3\x83\x92\x8d\xcd\x3a\xf4\xa8\x03\x0f\xd2\x68\xd6\x06\xe1\x65\x90\x3b\x64\x45\xce\x61\xe3\x70\x35\x67\x57\x1e\xdd\x4e\x96\x48\x21\xb9\x93\x7c\x5a\x12\x61\xf2\x27\xe8\xc1\xb0\xcf\xc5\x40\xf0\xc0\xa7\xc1\xac\xd7\xed\x48\x71\xdf\xc0\xf2\x8c\x17\x79\xa6\xe4\x49\x2a\x49\x6e\x6e\xad\x92\x65\x1c\x7e\x9d\xbf\x6b\x1c\xe5\xb0\x48\xa0\xe7\xf0\x08\xc6\xca\xf2\x35\x83\x76\x78\x34\xf7\x8f\x08\x3a\x27\xab\xdf\x2e\x7d\xe9\xa4\xed\x9f\xfe\x91\x75\x7c\x0d\x52\x6c\x97\x4a\x9e\x6d\x55\x31\xa9\x1f\x2b\x95\x35\x3a\x20\xb7\x98\x8b\x78\xa5\xe2\xe9\xd1\x61\xea\x51\x8d\x40\x23\x21\x90\x22\xd1\xc8\x21\x46\x4f\x26\x85\x53\x2a\x81\x25\x6e\x51\x7b\x1d\x68\x84\x47\x4c\xc7\x01\x6a\xb7\x8d\xd9\xa1\x6b\x9e\x7d\xa0\x19\xa2\xe8\xf1\xaf\x63\x54\x9d\x35\x68\x2b\x16\x91\x35\xf8\xbd\x5a\x69\xac\x1f\x9c\x8d\x46\x5a\x1a\xf1\xd4\x6f\xa3\xbe\x77\x5c\xaf\x11\xae\x35\x7f\xc0\xff\xe0\xba\xc9\x05\x37\x73\x98\xb5\x5d\x52\xb5\x7b\x7f\x60\xd7\x1f\xb5\x36\x8a\x82\xa2\xc7\xb8\x14\x80\x18\x0e\xd1\xcb\x86\xc2\x90\x3b\x6d\x43\x83\xd9\xb3\x81\x79\x91\xa1\xaa\xfd\xd1\xea\x66\xb4\xbc\x89\x68\x8e\x5e\xdf\xa0\xa1\x5a\x3c\x9d\x06\xbf\x68\x01\x35\xf6\xe2\x6a\x58\x36\x2d\x24\xd9\x8a\x60\xf1\xfd\xdb\x69\x87\x2f\xe8\x82\x5c\x55\x2e\x08\xf8\x68\xa5\x8b\xbe\xef\xaa\x4f\x49\xe2\x4c\x8a\x1f\x05\x9a\x6e\xa1\x7f\x22\x52\x2e\x04\x25\x80\xff\x47\x75\x9a\xe0\x53\x22\xb3\x85\xd3\x67\xf9\x25\x35\xbc\xdb\x97\xf0\xb6\xaa\xe8\xa5\x76\xcb\x19\xed\xd2\x9c\x46\x9f\xa5\x51\xe2\xb9\x39\xde\x22\x7f\x49\xea\xb1\x70\x51\xe4\xf5\x59\xfd\xa1\xf2\x8e\xc9\xeb\xc4\xa7\xd4\xfd\x8f\xe9\xb1\x7b\x41\xf9\x2c\xb2\x4c\xaf\x52\x6f\xdb\xc0\xef\xb4\xb0\x46\xea\xf0\xee\x3a\x4e\x0b\x5e\x5f\x2a\xd2\x15\xf8\x50\x55\xa7\x54\x3a\x34\x7e\x67\x07\xef\x04\x69\xab\x78\xb1\x1d\x92\x3c\xb6\x3d\x93\xdb\xbd\x64\xf1\x31\x4c\x9d\x5c\x6f\xda\xdb\xf4\xfd\xed\x57\x20\xe5\x7a\x9a\xda\x4d\x45\x6e\x46\x03\x3f\xeb\xf7\x8a\x64\x9e\x59\xf2\x1f\xff\x52\x5c\x19\x13\x8e\xbe\x14\x7f\x05\x00\x00\xff\xff\xa4\x4b\x14\xb9\x5b\x0e\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 3675, mode: os.FileMode(420), modTime: time.Unix(1472738873, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
