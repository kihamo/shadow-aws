// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x97\x5d\x6b\xdb\x3c\x14\xc7\xef\xf3\x29\x0e\x6a\x2f\x1f\xdb\x3c\xb7\xc5\x31\x04\xb6\xab\xc1\x18\xeb\xd8\xbd\x62\x29\xb1\x40\x91\x84\x24\x9b\x95\xd2\xef\xbe\x63\xd9\x4e\xe4\xd4\x76\x4b\x47\x43\x48\x20\x60\xeb\xbc\xfd\x25\xfd\x8e\x65\x3f\x3f\x83\x50\xa5\xac\x19\x07\xb2\xb3\x5a\x79\xae\x18\x01\x22\xe9\x93\xae\x7d\x56\x71\xca\xb8\x4d\xbd\x91\x69\xe5\x0f\x92\xc0\xcb\xcb\x6a\x95\x33\xd1\x80\xd5\x92\xaf\x89\xa7\x5b\x43\x15\x97\xa4\x58\x01\xfe\xf2\x5a\x42\x29\xa9\x73\x6b\xa2\x68\x03\xf8\x4f\xd0\xc3\x91\x93\xb7\x14\xce\xf7\xce\x21\x40\x8a\xde\x66\x2c\x77\x5c\x79\xea\x85\x56\x64\x48\x42\x4b\x2f\x1a\x4e\x8a\x9c\x42\x65\xf9\x6e\x4d\xee\x1c\xb7\x8d\x28\x39\xa6\xa4\x56\xd0\xa4\x44\xc1\x18\x8f\xae\x27\xc3\xb1\x16\x01\x46\x3d\x4d\xbc\xde\xef\x87\x91\xe2\xb1\x77\xcb\x33\x5a\xe4\x99\x14\x6f\x4a\x89\x8b\x53\x63\xa4\x28\xc3\xf8\x6b\x01\x63\xe3\xa2\x88\x4d\xe4\xfa\x6e\x21\x91\x0e\xaf\x8d\x28\x5f\x2b\x18\x86\x17\x6b\xff\x0a\x4e\x1f\xa9\xea\xea\xad\x2b\xad\x30\xd3\xd3\x3f\xb3\x2e\x6f\x42\xec\x3b\x96\x92\x67\xb5\x2c\x56\xdd\x65\x8b\x59\x0f\x02\x86\x85\x5a\xa8\x2b\xa6\x67\x02\xc4\x38\xa2\x1d\x81\x9e\x21\x10\x2c\x82\xe4\x94\x63\xa2\x92\xe4\x09\x2e\x81\x41\x6d\x01\xbe\x91\x6b\x70\x0f\x3e\xa3\x00\xe8\xc2\x2a\xdd\x70\xdb\x5f\x3b\x8f\x33\xe4\x6c\x22\xbe\xcb\xd1\xb6\xd6\xac\xad\xd8\x04\xd5\xe0\x8e\xb8\xe2\xd8\xb4\x73\xb6\x98\x69\xab\xd9\xd3\xb4\x0d\x1b\xdf\x52\xb5\xe7\x70\xaf\xe8\x81\xff\x07\xf7\x7d\x2d\x78\x58\x43\x3a\xb4\x49\xdb\xef\xd3\x89\xed\x74\xd6\xce\xc8\x0a\xcc\x1e\xf2\x62\x02\x54\x38\x27\x2f\x9b\x4b\x83\xe1\xf8\x1c\x9a\xad\x9e\xcd\xcc\x0b\x0d\xed\xda\x9f\xed\x6e\x86\xdb\x1b\x41\x73\x76\xfb\x0e\x86\x3a\x78\x46\x0d\x7e\xd5\x00\xf5\xf6\xe2\x6e\x1e\x9b\xc1\x25\x7a\x14\xc1\xe6\xe7\xf7\x4f\xe5\x4c\x20\x64\xd1\x22\x06\xd0\xe2\x47\xe1\xbf\xc0\x46\x19\xc3\x02\xf0\xff\x22\x6f\x91\x7f\x2c\x24\xfd\x21\xa9\xdf\x69\x7b\x88\xc4\x6c\xac\xba\x5a\x74\x3f\xc0\x6e\x7f\x34\xdc\x0a\xb5\xe1\x10\xbb\x08\xaf\x61\xe1\x02\xa9\xdd\xc1\x79\x51\x46\x43\xf1\xae\xf0\x8d\xf1\x38\x7e\x5b\xb8\x15\x2c\xe3\xf7\x9a\x65\x3a\x87\x88\xaf\x8a\x19\x2d\x94\xff\x74\x8e\xe3\x05\xef\x4e\xf8\x78\x07\x2e\x4a\x75\x2c\x65\x24\xe3\x2d\xc6\x67\x93\x0c\xab\x78\xb5\x1d\x12\x5d\x0e\x3d\x93\x9b\x23\xb2\xfc\x8f\x4f\xac\xd8\x57\xc3\xab\xed\xe3\x97\x6f\x80\xe4\x3a\x9c\xda\x43\x2b\x2e\xc5\x81\xdf\xdd\x7d\x2b\x32\xcf\x0c\xc6\x2f\x7f\xb7\xed\xb4\xf6\x67\xdf\x6d\x7f\x03\x00\x00\xff\xff\x96\xd5\x98\x03\xe9\x0d\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 3561, mode: os.FileMode(420), modTime: time.Unix(1452265757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
