// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xcf\x4f\xdb\x30\x14\xbe\xf7\xaf\x78\x32\x1c\xd7\x46\xbb\xa2\x34\x52\x05\x9c\x26\xed\x30\xa6\xdd\x4d\xfc\xda\x5a\x32\xb6\x65\x3b\x15\x08\xf1\xbf\xef\xc5\x49\x8a\x53\x92\x94\x75\x03\x31\x2a\x55\x4a\xfc\x7e\x7d\x7e\xfe\x3e\xdb\x79\x7c\x04\xa9\x4b\x55\x09\x04\xb6\x76\x46\x07\xd4\x82\x01\x53\xfc\xc1\x54\x21\xdb\x22\x17\xe8\x16\xc1\xaa\xc5\x36\xdc\x29\x06\x4f\x4f\xb3\x59\x2e\xe4\x0e\x9c\x51\xb8\x64\x81\xdf\x5a\xae\x51\xb1\x62\x06\xf4\xcb\x2b\x05\xa5\xe2\xde\x2f\x99\xe6\x3b\xa0\xff\x9c\x3c\x3c\x7b\xf6\x56\xd2\x87\xd6\x39\x06\x28\xd9\xda\xac\x43\x8f\x3a\xf0\x20\x8d\x66\x5d\x12\x5e\x06\xb9\x43\x56\xe4\x1c\xb6\x0e\xd7\x4b\x76\xe6\xd1\xed\x64\x89\x94\x92\x3b\xc9\xe7\x25\x01\xa6\x78\x72\x7d\x36\xec\x6b\x31\x10\x3c\xf0\x79\x30\x9b\x4d\x37\x52\xdc\xb4\x6e\x79\xc6\x8b\x3c\x53\xf2\x28\x94\xa4\x36\xb7\x56\xc9\x32\x0e\xbf\xac\xdf\x37\x4e\x62\x58\x25\xae\xa7\xe0\x08\xc6\xca\xf2\x25\x82\x6e\x78\xb2\xf6\xcf\xe8\x74\x4a\x55\x5f\xdd\xfa\xd2\x49\x3b\x3c\xfd\x03\xeb\xf4\x1a\xa4\xbe\x7d\x28\x79\x56\xa9\x62\xd6\x3c\xd6\x2c\x6b\x79\x40\x61\xb1\x16\xe1\x4a\xc9\x33\xc0\xc3\x34\xa2\x1e\x81\x96\x42\x20\x45\xc2\x91\xe7\x1c\x03\x95\x14\xce\xa9\x05\x96\xb0\x45\xee\xf5\x5c\xa3\x7b\xf4\xe9\x05\x40\x13\xb6\x35\x3b\x74\xed\xb3\x0f\x34\x43\x14\x03\xf1\x4d\x8e\x5a\x59\xa3\xb6\x62\x15\x51\x83\xdf\xb3\x95\xc6\x86\x9d\xb3\xc9\x4c\xb7\x46\x3c\x0c\xdb\x48\xf7\x8e\xeb\x0d\xc2\xb9\xe6\x77\xf8\x05\xce\xdb\x5a\x70\xb1\x84\x45\xa7\x92\x5a\xee\xc3\x89\xdd\x70\xd6\xc6\x28\x0a\xca\x1e\xf3\x52\x02\x42\x38\x06\x2f\x1b\x4b\x43\xe1\xb4\x0d\x8d\x56\xcf\x46\xe6\x45\x86\xba\xf7\x07\xab\x9b\xd1\xf2\x26\xa4\x39\x78\x7d\x05\x87\x1a\xf2\xf4\x04\xfe\xa1\x09\xd4\xda\x8b\xb3\x71\xda\x74\x2e\xc9\x56\x04\xab\x1f\xdf\x8f\x07\x5c\xa2\x0b\x72\x5d\x87\x20\xe0\xbd\x95\x2e\xc6\x1e\x8f\xbb\xd6\xc2\x1a\xa9\xc3\xdb\x52\x59\x12\x8f\x93\x75\x8a\x5c\x4e\x77\xdb\xbf\xe1\x33\x17\x82\x0a\xc0\xd7\x49\x4a\x27\xfe\x29\x90\xc5\xca\xe9\x93\xe2\x92\x76\x5f\xef\xbb\x7d\x55\x37\xff\x94\x6c\xfb\x45\xb8\x34\x95\x0e\x1f\x56\x9b\x27\x88\xb3\x3d\xfb\x3e\x8b\x2c\xe3\x29\x3d\x2d\xc8\x7f\xa4\x96\xd8\xb8\xa8\x93\xe6\x66\xf0\xae\x0a\x89\xc5\x9b\xc2\xc7\x04\xf2\x9f\xf1\xb1\x7f\x1d\xfa\x2c\xb4\x4c\x2f\x6e\xaf\x3b\x2e\xba\x1d\xe7\xcd\x79\x9c\x36\xbc\xb9\xc2\xa4\x2b\xf0\xae\xac\x4e\xa1\xf4\x60\xfc\xc9\x21\xd0\x4b\xd2\x75\xf1\xc3\x2a\x24\x79\xec\x34\x93\xdb\x3d\x65\xf1\x3e\xcc\x9d\xdc\x6c\xbb\xbb\xfb\xcd\xd5\x37\x20\xe6\x7a\x9a\xda\x45\x0d\x6e\x41\x03\xbf\x9a\xf7\x1a\x64\x9e\x59\x8a\x9f\xfe\x2e\x5d\x1b\x13\x0e\xbe\x4b\x7f\x07\x00\x00\xff\xff\x3b\x89\xe0\xc1\xc9\x0e\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 3785, mode: os.FileMode(420), modTime: time.Unix(1472742778, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
