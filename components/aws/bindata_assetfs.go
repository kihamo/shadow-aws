// Code generated by go-bindata.
// sources:
// templates/views/index.html
// DO NOT EDIT!

package aws

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdd\x6e\xe4\x34\x14\xbe\x9f\xa7\xb0\xb2\x0b\x02\x89\x34\xdb\x85\x0a\x98\xce\x44\x1a\x6d\x2b\xb4\xe2\x6f\x45\x17\xb8\xf6\xc4\x9e\xc4\x6a\x12\x5b\xb6\x67\xda\x52\xcd\x0d\xd7\x3c\x03\xef\x00\x57\xdc\xc0\x33\xcc\xbe\x11\xc7\x4e\x32\x75\xa6\xf9\x6b\xb7\x45\xa5\x6a\xa4\xdd\x66\xec\xf3\xef\x73\xbe\x63\x3b\x97\x97\x88\xd0\x05\xcb\x29\xf2\x12\x8a\x89\x87\xd6\xeb\xd1\x44\xe9\x8b\x94\x22\x7d\x21\xe8\xd4\xd3\xf4\x5c\x07\x91\x52\x5e\x38\x42\xf0\xec\x29\x1a\x69\xc6\x73\x5f\x33\x0d\x34\x97\x76\xd0\x3c\x19\x96\x31\x83\x61\x2e\xc6\x68\x9f\x66\x87\xdb\x89\x84\xb2\x38\xd1\x63\xf4\xb2\x1a\x5c\x8f\x76\x24\x71\x9e\xce\xb1\x74\x64\x09\xae\x98\x99\x1a\x23\x49\x53\xac\xd9\x8a\x5e\x89\x33\xf6\xf8\x38\x65\xb1\x99\x35\x92\x0f\x77\x4c\x18\xa3\x17\xe8\x73\x71\x0e\xff\xbf\xa8\xf4\x4d\x02\xeb\x51\x38\x02\x6f\x69\x4e\x8c\x8f\x23\xc7\xf1\x88\xe7\x9a\xe6\xba\xf0\x9d\xb0\x15\x8a\x52\xac\xd4\xd4\x93\xfc\xac\xf4\xda\x1d\x8d\x78\xea\xa7\xb1\xbf\xff\xb2\x9c\xb3\xf3\xc9\x7e\x35\x2d\x70\x4c\x7d\x13\x4a\x2a\xbd\x70\x96\xe1\x5f\x78\x8e\x7e\xa6\x73\x74\x42\xe5\x8a\x45\x74\x12\x24\xfb\xa5\xcc\x00\x84\x86\xa3\xf2\x4f\xa1\x58\xf2\xd4\x84\x1c\xcf\x05\xce\x69\x5a\x29\x5f\xa6\x95\xf0\x1c\xaf\x10\xfc\xf3\x81\x42\x79\x57\xd4\x29\x53\xda\xb5\x26\x65\xe5\x9c\x90\x54\x81\x67\xd8\x04\xd3\xab\x84\xe0\xc8\x44\xd4\x0b\x27\x18\x25\x92\x2e\xa6\xde\x33\x55\xd8\x06\x22\xb1\x64\xd8\x37\xf1\x00\x7e\x20\xbd\x9a\xd8\xea\xf2\x10\xc1\x1a\xc3\xa2\xc5\x71\x35\x12\x96\xbe\xa9\x49\x80\xc3\x49\x90\xb2\x5e\x53\x1c\xdd\x58\x88\x94\x45\x76\xf8\xba\xfe\xfa\x64\xa7\x0d\x33\x87\xf4\x36\x76\x40\xe2\xb2\xe8\xba\x05\xd5\x70\xa7\xee\xb7\x96\xe8\x36\x5a\xd5\x72\xae\x22\xc9\x44\xb3\xfb\x3b\xb3\xdd\x6b\xe0\xd2\xd6\x4d\x99\x04\xcb\x34\x1c\x5d\x4b\x64\x60\xf3\xab\xd4\x77\x6c\x6e\xc8\x43\x97\xc3\x8c\xa0\x32\x85\x10\x23\x4e\x8e\x5c\xc9\x68\xd0\x94\x52\x1f\x42\x20\xc0\x36\x9b\x7b\x35\x52\x4b\x6e\x69\x6a\x0c\xa8\x60\x4b\xf8\x8a\xca\xf2\x5d\x69\xf0\x90\x92\x06\xfe\x42\x86\xa9\xbb\xd6\xb9\x70\x66\xad\x46\x6a\x9b\xad\x30\xd6\x4c\x1c\x74\x4a\x9a\x73\x72\xd1\x3c\x07\xa0\x22\x71\x1e\x53\xf4\x3c\xc7\x19\xfd\x04\x3d\x2f\x75\xa1\xf1\xd4\xe0\x5d\xa1\xd7\xc0\x4c\xb3\x60\xd9\x2c\xb5\x98\x24\x21\x48\xb7\x72\x41\x00\x58\xd8\x66\x5e\xd0\x26\xe6\x0a\xfc\x5a\xf8\x9a\xfd\x82\x09\x13\xfb\x9d\xd5\x2d\x50\xab\xed\xe7\x80\x1c\x2a\x92\xa7\x56\xe0\xed\x09\x54\x6b\x3a\x4d\xd9\xd3\x44\x5b\xb4\x95\xb6\x5c\x59\x70\x99\xa1\x8c\xea\x84\x83\x19\x6f\xbe\x3f\x79\xdb\x42\x68\x89\x59\x2e\x96\xba\x6c\x88\x09\x23\x84\x02\x9a\x9a\x95\x98\x7a\x4b\x01\xa5\x08\x50\x8f\x56\x38\x5d\xd2\x5d\xc4\x0a\x3a\x64\xce\x97\x5a\x43\x6f\x28\x84\x42\xa5\x67\x0c\x3a\x10\xcf\x23\x60\x3f\xad\x06\x3e\xfa\xf8\x70\x1b\xb8\xb9\xce\x11\xfc\xf3\x85\x64\xd0\xe8\x2e\xec\xfb\xb9\xf2\x5a\x15\x54\x8f\x85\x0a\x90\x2a\xe6\x1c\x4b\x02\xad\x43\xc6\x54\x4f\xbd\x33\x46\xe0\x2f\x00\x00\xa1\x3e\x44\x6f\xa0\x9c\x2d\xe4\x40\x70\x35\x13\x43\xb9\xa0\x51\xc7\x54\x42\xef\x34\xce\x0d\x64\x12\x29\x8e\x68\x06\xe0\x64\x41\xb8\x9f\xc9\xe6\xc6\xd4\xdb\xfc\xbe\xf9\x63\xf3\xf7\xe6\x9f\xcd\x9f\x9b\xbf\xde\xfd\xfa\xee\xb7\x8e\x65\x35\xcf\x2e\x79\xfb\x7a\x05\xc5\x82\xb5\x55\x9d\xc9\xa7\xa6\xe2\xa9\x15\x46\xdb\xd0\xc3\xc2\xca\x72\x3e\x7c\xd6\x8e\x90\x15\xc9\xeb\xd9\xb7\xfd\x44\x4e\x6b\x46\xb3\x1f\xbe\xeb\x67\x78\x45\xa5\x66\x0b\xc3\x42\x11\x3d\x17\x4c\x5a\xde\x7e\xbe\xe3\x9c\x08\xce\x72\xdd\x01\xed\x15\xe9\x37\x58\x69\x54\x14\xef\xbd\xf6\x01\x06\x4d\xc0\xc1\x04\xdb\x08\x5c\x8c\xe8\x68\x06\x20\x85\x2d\x50\xce\x75\x4d\xc2\xde\x71\x6e\x96\x97\xac\xd7\xe5\xfa\x13\xa3\x48\x7a\x97\x97\x00\xee\xeb\x75\x6f\x07\xc1\x84\x80\x55\x68\xbf\xb3\x89\x94\xf4\xdb\x14\x33\x7b\xee\x08\x4a\x91\xb6\xc1\xa9\xe3\x38\xd8\x5c\xb3\xf7\xb5\x82\x24\x69\x73\x73\xab\x4c\x41\x4f\xa8\xd4\xc5\xe9\x85\x48\x18\x6c\x4d\xd0\xf6\xcd\xe7\xa7\x1e\xb2\x9b\x78\xbb\x01\xe7\x72\x8c\x9e\x1d\x44\xf3\x2f\x0e\x22\xd8\x4d\x05\x86\xb9\xd7\x2e\x9a\x2a\xfa\xde\x66\x48\x9a\x71\xb3\xf1\xd9\x31\x85\x7c\x79\xf0\xe9\x67\x8b\xe1\xa6\xb4\xb7\x61\x6b\x45\xdf\xba\xd8\x9d\x80\x1b\xe3\x99\xcc\x87\xac\xe7\x8d\xd7\xce\x29\xc4\xe3\x6d\x1d\x1e\x99\xb2\xec\x09\x64\x29\xef\x6e\x84\x0d\x5c\x3c\xf3\x7c\x98\x11\xac\x92\xc3\x7b\x5f\x80\xee\x2c\x72\xe0\x5c\x48\x1e\x03\x98\xef\x6e\x6e\x86\xb2\xf9\xe6\x60\xec\xfe\xf0\xd5\x32\x8a\x8c\xbc\x2a\x05\x33\x38\x74\x43\x2f\xd7\xc9\xd8\x1c\xb0\x8b\xb7\xdd\xc8\x7f\x45\x75\x89\x1a\x6f\xa8\x34\x75\x0c\xce\x7f\x30\xc0\x22\xf3\xb4\xcb\x7a\xc5\x97\x56\x52\xbf\x63\xd7\x3b\xde\xed\xfd\x3f\xc3\x32\x67\x79\x7c\x53\xff\x8f\x98\xba\xbb\x00\x54\xc2\xee\x32\x02\x3d\x24\x37\xc7\x04\xd3\xe1\x7e\xb4\x0d\xee\xc1\x9e\x17\x6e\x71\x60\x28\xcf\xe3\x8f\xe1\xa8\x50\x5d\x2d\x3c\x1d\x12\x9e\x0e\x09\x8f\xfa\x90\x60\xaf\xc7\xba\x77\xfe\x77\xb4\xd3\xb6\x25\x65\xf7\xd8\x45\x71\xbd\xcf\x55\xcb\x4d\x36\xca\x16\x7c\xad\xca\x3d\xeb\x6c\xdf\x7e\xec\x7f\x06\xba\xf5\x7b\xc8\xc7\x80\xbd\x3b\x37\xab\x4f\x10\xfc\x04\xc1\x8f\x1a\x82\xdd\xaf\x03\xc3\xee\x60\xaa\xbb\x94\x7b\xc7\x6c\xb7\x14\x8b\x7b\x72\xb7\x36\xff\x53\x04\x77\x35\xef\xb9\x21\x1b\x7a\xbe\xbe\x26\xa4\x8a\xe2\x83\xed\x06\xce\xeb\xf6\x4b\xa4\xa8\xdd\xfb\xd8\x8f\xac\x65\x76\x9e\x1c\x7d\x8d\x20\x73\x95\xfd\x36\x0b\xc6\xed\x29\x72\xfa\x53\xf1\xdb\x7e\x3c\x0d\x84\xf3\x8d\xf5\xdf\x00\x00\x00\xff\xff\x45\x67\x1d\xb4\x5b\x1e\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 7771, mode: os.FileMode(420), modTime: time.Unix(1484480143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
