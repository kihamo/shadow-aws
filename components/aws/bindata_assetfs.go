// Code generated by go-bindata.
// sources:
// templates/views/ses.html
// templates/views/sns.html
// DO NOT EDIT!

package aws

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSesHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5b\x6f\xdb\x3a\x12\x7e\xcf\xaf\x20\x84\x76\x93\xa0\x91\x2d\x1b\x49\x1e\x1c\xc5\xd8\x6e\xbb\x45\x1f\x1a\xa0\xdb\xe4\x69\x0f\xce\x03\x2d\xd1\x36\x7b\x28\x51\x25\xa9\xc4\x69\xd0\xff\x7e\x66\x48\x49\x96\x75\xb1\x93\x36\xcd\x41\xd1\xb8\xa8\xc3\xcb\x70\x2e\xdf\x5c\x34\xb4\xee\xee\x48\xcc\xe6\x3c\x65\xc4\xfb\xac\x3d\xf2\xed\xdb\x1e\x81\x4f\xa8\x23\xc5\x33\x43\xcc\x6d\xc6\xce\x3d\x9a\x65\x82\x47\xd4\x70\x99\x0e\x3f\xd3\x6b\xea\x36\xbd\xa9\x25\xc5\xcf\x8b\x83\x79\x9e\x46\xb8\x7f\x70\x48\xee\xaa\x65\xfc\x5c\x48\xa5\xb8\x1e\xbc\x56\x8c\x1e\x6c\xee\xe0\x87\x09\x96\xb0\xd4\x4c\xc8\xbe\x36\xd4\x68\x3f\x66\x82\x5f\x33\xc5\x99\xde\x3f\x6a\x11\xc7\xd4\xd0\x09\xf9\xa3\xb5\x8e\x1f\x30\x43\xd1\x74\xc1\xc8\x0b\x9e\xc6\x6c\x75\x44\x5e\x20\x43\x32\x39\x27\x03\xcb\xb9\x34\xac\xe7\x2c\x9f\x17\x07\x81\xee\x08\xe6\x2c\x8d\x61\x44\xda\x0a\xd7\x3f\xfb\x86\x27\x6c\x1f\x74\x87\x03\x56\xdc\xe0\x0a\x16\x60\x90\x64\x83\x77\x52\x25\x20\xdf\x1b\x07\xc1\xa9\x1f\x8c\xfc\x60\x7c\x35\x3a\x99\x04\xc7\x93\xe0\xe4\xff\x88\x72\x87\x79\x1b\xac\x59\x42\xb9\xd0\xc0\xbc\xe2\xfd\xd6\x41\x73\xfb\xda\x18\x96\x64\xdb\x2d\xea\xde\xa9\xec\x6a\xed\xfe\xd9\xd6\x66\xf5\x17\xbb\x9d\x14\x26\xb6\x77\x6f\x61\x57\x83\x2f\x4a\x3d\x3b\x18\x08\x3a\x63\xc2\xd2\xfc\xb7\x97\x26\x93\x3c\x35\x97\xfc\x2b\x9b\x90\x71\x7b\x77\xc9\x63\xf6\x5e\x82\xcd\xa0\x07\xcd\x8d\xec\xd0\x43\x31\x6d\x4f\x1b\x95\xb3\x0e\x1b\x3e\xa0\x0e\xce\x15\x13\x52\x85\xe8\xaa\x19\xa3\x6b\x6e\x26\x57\x29\x59\x0d\x8c\xbc\x34\x8a\xa7\x8b\x83\xc3\x81\xce\x67\xda\xa8\x83\xe3\xa3\xd3\x43\xf2\x8a\xec\xc3\xbf\x57\x96\x00\x5d\xdd\x24\x0a\x8e\x4e\x0e\xcf\x5a\x9c\x37\xe1\xfe\x06\x14\x3f\x90\x20\x33\x09\x56\x3c\x67\x47\x2b\x3b\xfe\xe3\x70\x79\x4e\x0a\xf2\x1b\x26\x45\x24\x93\x4c\x50\x40\xed\x39\x2f\x9a\x79\xf1\xa6\x82\xe6\x39\x35\xc8\x6f\x98\x1a\x8a\x7d\x66\xd1\x73\x5e\xb4\xf2\xe2\x93\xc3\xe5\x39\x29\xc8\xaf\x9a\x14\xcd\x71\x38\x74\xd7\x92\xe9\xde\xda\x45\x7b\xb5\xdb\x4d\x24\x53\x03\x99\x61\xaf\x38\x61\xcc\xaf\x49\x24\xa8\xd6\xe7\x9e\x92\x37\xc5\x4d\xa6\xbe\x1a\x49\xe1\x8b\x85\x3f\x1a\xd7\x6e\x39\xe1\x72\x54\x6e\x67\x74\xc1\xfc\x25\xa3\x31\x53\xde\xf4\x75\x42\xbf\xca\x94\x5c\x72\x28\xb5\x8c\x58\x47\x91\x4b\xa6\xae\x79\xc4\xc2\xe1\x72\x54\x30\x1f\x02\xf7\xe9\x5e\xf1\x67\xcf\x65\xc9\x80\x29\x25\x95\x6e\xaa\x44\x05\x53\x86\xd8\x6f\x3f\xc6\x3c\x54\xe5\x84\xeb\x84\x6b\x4d\x67\x82\x95\x3a\xcf\x72\x63\x40\xb8\xbb\xa8\xb9\x89\x57\x19\x21\xa4\x66\x9e\xcd\xf4\xf2\x68\xc1\xdc\x23\x54\x71\xea\x43\x70\xc4\x2c\x3d\xf7\xd0\xf3\xde\xf4\x5f\x18\xa7\xfa\x2c\x1c\x3a\x36\x4e\x40\xbb\x14\x58\x9d\x6d\x2d\x58\x6b\x5f\x42\xd4\x9b\xfc\x75\x8a\x82\x43\xb1\x78\x77\x07\x14\x08\x80\x43\x66\xd3\x79\x88\x11\xe8\xa4\x01\xee\x6d\x20\xf1\x74\x2e\xff\x51\x88\x36\x94\xec\x31\x64\x61\xc8\x40\x61\xaa\xa7\x10\xef\x24\x18\x04\x4d\x8b\x32\x9a\x32\x41\xec\xb7\xaf\xf3\x08\xda\x59\xdd\x11\x99\x6e\x1f\x63\x0f\xd8\x78\xd3\x4b\x14\x62\x0b\x48\x21\xb7\x9b\x7e\x26\xe3\xdb\x7a\x28\xcf\x21\x9f\x4b\x0a\x1c\xfb\x4b\xa9\x38\x44\xb1\xa1\xc2\x23\x4a\x0a\xe6\x96\x3d\x92\x30\xb3\x94\x31\xb0\x91\x1a\x20\xe1\x30\xd2\x20\xd1\x47\x81\x80\x90\xad\x05\xe7\xde\x90\xde\xe8\xa1\x66\xba\x26\xa1\xa9\x86\x15\xb2\x50\x32\xcf\x1a\x44\x96\xd0\xd6\x39\x02\x34\x00\xb4\xf4\xea\x49\xa8\x13\x7f\x4c\x30\x77\x15\x66\x24\x92\x79\xd3\x77\x4a\x26\xe1\xd0\x4e\x3a\x78\x35\xb2\x18\x18\x8c\x82\x0e\x99\x96\x96\xa7\x59\x5e\xfe\xca\x61\xd8\xca\x78\x1b\xea\x16\x62\x9d\xd9\x73\x10\xea\x91\x94\x26\xac\x1c\x43\x63\x15\xb1\xa5\x14\x50\x04\xce\x3d\xb6\xa2\x98\xfe\xa3\x7f\xc7\x12\x5d\x3c\x88\x90\xe2\x9a\x8a\x1c\xc8\x31\x40\x10\x35\xd4\x1b\x9c\xde\x05\xc0\xda\x77\xdb\x96\x7e\x12\x9e\x57\xf2\xc9\xd1\x44\xad\x1c\x96\x38\xda\x85\xe4\x11\x29\x16\xc7\xdb\xe0\xbd\x92\x4f\x0e\x2e\x3c\xb3\xb0\x8f\xd8\x89\xf0\xa5\xa3\x7b\x72\x98\x2b\xfd\x1c\xd6\xd5\xb4\x81\x5c\xa1\xde\xd3\xc7\x26\xd8\xb0\x13\xbb\x37\xee\xc1\x6d\x0d\x7e\x1c\x00\x35\x74\xc9\x60\x6d\x27\x6a\xd0\x0e\xc0\xda\x71\x15\x9d\x56\x43\x1b\xb1\x38\xea\x66\x68\x99\xca\x0c\x6b\x61\x89\xac\xbd\x74\x79\xae\xf0\xb3\x2f\x45\x7c\x02\x07\x52\xec\x60\x3f\xec\xd4\x60\x71\xf5\xa4\x98\x7e\xc4\x3d\x82\x3e\x0d\x87\x8e\xdf\xbd\x05\x2e\x4d\x22\x3a\xe5\xd9\x8d\x6e\x71\xef\xaf\x2e\x3e\x6c\x17\x04\x4d\x95\x3d\xf5\xa4\x51\x51\x3c\x4b\x77\x06\xc6\x85\xa3\x7b\x9c\x98\x40\xd0\x29\xdc\xa9\xee\x15\x15\x95\x86\x18\x18\xe5\x64\x5a\x66\xd3\x45\xd5\x0b\x84\xc3\x92\xed\xcf\x07\xb0\xcb\x58\x52\x8c\xe4\x7c\xae\x99\xf1\xc7\xdb\x2b\x4a\x51\x30\x12\x5e\xaf\x17\x76\xe6\x6a\x4d\x39\x2b\x22\x0e\x3b\x8f\xca\x47\x33\x93\x12\xf8\xef\x67\x8a\x27\x54\xdd\x7e\x57\x19\x09\x87\x68\x61\x57\xbb\x5c\xeb\xa5\xfa\x1a\x26\x6c\x01\xef\xd1\x2d\xc1\xdd\x8f\x6b\xc3\x23\xfd\xa0\x6e\xa9\x71\x5d\x20\xda\xdc\x62\x87\x04\x96\x2e\x78\x3a\x69\xc6\x54\xd3\x15\x49\xec\x9f\xda\xa4\xf6\x05\x9b\x1b\x37\xba\xa1\xca\xb6\x81\x3a\xa1\x42\x54\x0c\x33\x1a\xa3\x9e\xc8\x31\x84\xbb\x90\x4c\x17\x65\x50\x61\x6d\x86\x4b\x45\x0a\x85\xa1\xd8\xd8\x11\x2c\x9b\x82\x15\x5f\x2c\x0b\xc9\x49\x0e\x35\xe0\x7e\x72\xd7\xdd\x2a\x08\xff\x54\x4e\xfa\x34\x68\x4e\xbf\x1f\xb4\x4c\xc9\x85\xc2\xee\x77\xf3\x0c\xb8\x05\x9a\xee\x64\x12\x9c\xed\x88\xff\xf2\xbc\x3f\xa3\x8a\xd4\x27\xee\xa2\xb0\xb1\x02\xb6\xf0\x0c\x00\xc1\x56\xf6\x9a\x95\xbd\x6f\x49\x02\x14\xc5\x3d\xc0\x06\x7d\x2a\x6f\xaa\x87\xa6\xf9\xc8\x54\xe4\x1c\x53\x27\x49\x38\xf4\xc3\xc1\xc6\x0a\x5d\x9d\x7b\xa3\x20\xa8\xac\xb9\xe1\xb1\x59\x4e\xda\x6c\x5e\x9e\xc1\x61\xdf\xed\x8e\x59\xd2\x93\xac\x70\x0e\x92\x2c\x35\x73\xe2\xbd\x1c\x04\x73\xaf\xc5\xe5\xbb\x32\xef\x21\xae\x1b\x07\xd9\x8a\x04\xc4\x77\x7f\xb7\xf8\x51\x40\xaa\xf5\x17\x2c\x0d\xb9\xd6\xa6\xf4\xb9\xe9\x35\x1d\x2b\x0e\x46\xe3\x97\x5c\x1a\x3a\xe9\x79\xb6\xd7\xb8\x66\xb9\x10\x7d\xa1\x3f\x0d\x59\x32\xc5\x6a\x4d\x8a\x88\x2f\x0f\x59\x4a\x77\xeb\x76\x25\x1d\xfc\x37\x3e\x7e\x2f\x73\x75\xe9\x6a\x50\x15\xff\xee\xda\xa5\x49\x06\xf7\xf3\xf1\x31\x59\x02\x09\x8e\xb9\x8c\xc3\x21\x30\x07\x3a\xd0\xa5\xab\x10\xf6\xac\x3f\x1c\x90\xff\x21\x10\x24\xd7\x2c\x7e\x0c\x34\x6a\xa9\xbf\x3d\xc2\x6a\x15\xe0\x69\xec\xbc\xa0\x2b\x62\x7d\xa5\xa8\x61\x8f\x68\xea\x36\x9f\xa3\xb7\x3f\x81\xb8\x0e\x8f\x43\x53\x04\x9d\xc1\xc3\xbd\xfc\xe3\x59\xe7\x8f\x4e\xf0\x7b\x3d\xde\xf1\xe8\x11\x0b\xff\x74\x47\xb1\xbc\x61\x42\x10\xfc\x82\x46\xa1\xaf\x3f\x58\x1e\x6f\x20\x85\x71\x80\x48\xbd\xad\xde\xd6\x87\xc3\xe5\x71\xcf\x59\x14\x65\x3b\x8b\xc6\x0b\x7e\xaf\xeb\x09\xd6\x01\x4b\xdf\xd2\x93\x5a\x5a\xbc\x5e\xbc\xb7\x99\xc5\x6b\xda\x5f\xca\xc6\xf5\xab\xa2\x7b\x9b\xb9\x7e\xf1\xf6\x4b\x59\x5a\xfc\xf8\x7f\x6f\x33\x8b\x97\x28\x3f\x60\x63\xbd\xdb\x6c\xfd\x10\xec\x1e\x2b\x7f\x07\x00\x00\xff\xff\xab\x64\x56\x58\x89\x23\x00\x00")

func templatesViewsSesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSesHtml,
		"templates/views/ses.html",
	)
}

func templatesViewsSesHtml() (*asset, error) {
	bytes, err := templatesViewsSesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/ses.html", size: 9097, mode: os.FileMode(420), modTime: time.Unix(1490088114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSnsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdd\x6e\xe4\x34\x14\xbe\x9f\xa7\xb0\xb2\x0b\x02\x89\x34\xdb\x85\x0a\x98\xce\x44\x1a\x6d\x2b\xb4\x02\x96\x15\x5d\xb8\xf7\xc4\x9e\xc4\x6a\x12\x5b\xb6\x67\xda\x52\xcd\x0d\xd7\x3c\x03\xef\x00\x57\xdc\xc0\x33\xcc\xbe\x11\xc7\x4e\x32\x75\xa6\xf9\x6b\xb7\x45\xa5\x6a\xa4\xdd\x66\xec\xf3\xef\x73\xbe\x63\x3b\x97\x97\x88\xd0\x05\xcb\x29\xf2\x12\x8a\x89\x87\xd6\xeb\xd1\x44\xe9\x8b\x94\x22\x7d\x21\xe8\xd4\xd3\xf4\x5c\x07\x91\x52\x5e\x38\x42\xf0\xec\x29\x1a\x69\xc6\x73\x5f\x33\x0d\x34\x97\x76\xd0\x3c\x19\x96\x31\x83\x61\x2e\xc6\x68\x9f\x66\x87\xdb\x89\x84\xb2\x38\xd1\x63\xf4\xb2\x1a\x5c\x8f\x76\x24\x71\x9e\xce\xb1\x74\x64\x09\xae\x98\x99\x1a\x23\x49\x53\xac\xd9\x8a\x5e\x89\x33\xf6\xf8\x38\x65\xb1\x99\x35\x92\x0f\x77\x4c\x18\xa3\x17\xe8\x4b\x71\x0e\xff\xbf\xa8\xf4\x4d\x02\xeb\x51\x38\x02\x6f\x69\x4e\x8c\x8f\x23\xc7\xf1\x88\xe7\x9a\xe6\xba\xf0\x9d\xb0\x15\x8a\x52\xac\xd4\xd4\x93\xfc\xac\xf4\xda\x1d\x8d\x78\xea\xa7\xb1\xbf\xff\xb2\x9c\xb3\xf3\xc9\x7e\x35\x2d\x70\x4c\x7d\x13\x4a\x2a\xbd\x70\x96\xe1\x5f\x78\x8e\x4e\x58\x26\x20\x58\x6f\xb8\x66\x0b\x16\x61\xe3\x1a\x3a\xa1\x72\xc5\x22\x3a\x09\x92\xfd\x52\x47\x00\x4a\xc2\x51\xf9\xa7\x30\x44\xf2\xd4\x2c\x01\x9e\x0b\x9c\xd3\xb4\x32\x66\x99\x56\xca\x72\xbc\x42\xf0\xcf\x07\x0a\xe5\x5d\x51\xa7\x4c\x69\xd7\xba\x94\x95\x73\x42\x52\x05\x9e\x5a\x0b\xbc\x4a\x08\x8e\x4c\x84\xbd\x70\x82\x51\x22\xe9\x62\xea\x3d\x53\x85\x6d\x20\x12\x4b\x86\x7d\x13\x1f\xe0\x07\xd2\xab\x89\xad\x2e\x0f\x11\xac\x31\x2c\x62\x1c\x57\x23\x61\xe9\x9b\x9a\x04\x38\x9c\x04\x29\xeb\x35\xc5\xd1\x8d\x85\x48\xcb\x18\x5d\xd7\x5f\x9f\xec\xb4\x61\xe6\x90\xde\xc6\x0e\x48\x64\x16\x5d\xb7\xa0\x1a\xee\xd4\xfd\xce\x12\xdd\x46\xab\x5a\xce\x55\x24\x99\x68\x76\x7f\x67\xb6\x7b\x0d\x5c\xda\xba\x29\x93\x60\x99\x86\xa3\x6b\x89\x0d\x6c\x7e\x55\x0a\x8e\xcd\x0d\x79\xe8\x72\x98\x11\x54\xa6\x10\x62\xc4\xc9\x91\x2b\x19\x0d\x9a\x52\xea\x43\x08\x04\xd8\x66\x73\xaf\x46\x6a\xc9\x2d\x4d\x8d\x01\x15\x6c\x09\x5f\x51\x59\xbe\x2b\x0d\x1e\x52\xd2\xc0\x5f\xc8\x30\x75\xd8\x3a\x17\xce\xac\xd5\x48\x6d\xb3\x15\xc6\x9a\x89\x83\x4e\x49\x73\x4e\x2e\x9a\xe7\x00\x64\x24\xce\x63\x8a\x9e\xe7\x38\xa3\x9f\xa1\xe7\xa5\x2e\x34\x9e\x1a\xfc\x2b\xf4\x1a\xd8\x69\x16\x2c\x9b\xa5\x16\x93\x24\x04\xe9\x56\x2e\x08\x00\x0b\xdb\xcc\x0b\xda\xc4\x5c\x81\x61\x0b\x5f\xb3\x5f\x30\x61\x62\xbf\xb3\xba\x05\x6a\xb5\xfd\x1c\x90\x43\x45\xf2\xd4\x0a\xbc\x3d\x81\x6a\x4d\xa8\x29\x7b\x9a\x68\x8b\x36\xd3\x96\x2b\x0b\x2e\x33\x94\x51\x9d\x70\x30\xe3\xed\x0f\x27\xef\x5a\x08\x2d\x31\xcb\xc5\x52\x97\x0d\x32\x61\x84\x50\x40\x53\xb3\x12\x53\x6f\x29\xa0\x14\x01\xfa\xd1\x0a\xa7\x4b\xba\x8b\x58\x41\x87\xcc\xf9\x52\x6b\xe8\x0b\x85\x50\xa8\xf4\x8c\x41\x47\xe2\x79\x04\xec\xa7\xd5\xc0\x27\x9f\x1e\x6e\x03\x37\xd7\x39\x82\x7f\xbe\x90\x0c\x1a\xdf\x85\x7d\x3f\x57\x5e\xab\x82\xea\xb1\x50\x01\x52\xc5\x9c\x63\x49\xa0\x75\xc8\x98\xea\xa9\x77\xc6\x08\xfc\x05\x00\x20\xd4\x87\xe8\x0d\x94\xb3\x85\x1c\x08\xae\x66\x62\x28\x17\x34\xee\x98\x4a\xe8\xa5\xc6\xb9\x81\x4c\x22\xc5\x11\xcd\x00\x9c\x2c\x08\xf7\x33\xd9\xdc\x98\x7a\x9b\xdf\x37\x7f\x6c\xfe\xde\xfc\xb3\xf9\x73\xf3\xd7\xfb\x5f\xdf\xff\xd6\xb1\xac\xe6\xd9\x25\x6f\x5f\xaf\xa0\x58\xb0\xb6\xaa\x33\xf9\xd4\x54\x3c\xb5\xc2\x68\x1b\x7a\x58\x58\x59\xce\x87\xcf\xda\x11\xb2\x22\x79\x3d\xfb\xbe\x9f\xc8\x69\xcd\x68\xf6\xe3\x9b\x7e\x86\x57\x54\x96\x3b\x27\x8a\xe8\xb9\x60\xd2\xf2\xf6\xf3\x1d\xe7\x44\x70\x96\xeb\x0e\x68\xaf\x48\xbf\xc3\x4a\xa3\xa2\x78\xef\xb5\x0f\x30\x68\x02\x0e\x26\xd8\x46\xe0\x62\x44\x47\x33\x00\x29\x6c\x81\x72\xae\x6b\x12\xf6\x8e\x73\xb3\xbc\x64\xbd\x2e\xd7\x9f\x18\x45\xd2\xbb\xbc\x04\x70\x5f\xaf\x7b\x3b\x08\x26\x04\xac\x42\xfb\x9d\x4d\xa4\xa4\xdf\xa6\x98\xd9\x83\x47\x50\x8a\xb4\x0d\x4e\x1d\xc7\xc1\xe6\x9a\xbd\xaf\x15\x24\x49\x9b\x9b\x5b\x65\x0a\x7a\x42\xa5\x2e\x4e\x2f\x44\xc2\x60\x6b\x82\xb6\x6f\x3e\x3f\xf5\x90\xdd\xd4\xdb\x0d\x39\x97\x63\xf4\xec\x20\x9a\x7f\x75\x10\xc1\x6e\x2a\x30\xcc\xbd\x76\xd1\x54\xd1\x0f\x36\x43\xd2\x8c\x9b\x8d\xcf\x8e\x29\xe4\xeb\x83\xcf\xbf\x58\x0c\x37\xa5\xbd\x0d\x5b\x2b\xfa\xd6\xc5\xee\x04\xdc\x18\xcf\x64\x3e\x64\x3d\x6f\xbc\x76\x4e\x21\x1e\x6f\xeb\xf0\xc8\x94\x65\x4f\x20\x4b\x79\x77\x23\x6c\xe0\xe2\x99\xe7\xe3\x8c\x60\x95\x1c\xde\xfb\x02\x74\x67\x91\x03\xe7\x42\xf2\x18\xc0\x7c\x77\x73\x33\x94\xcd\x37\x07\x65\xf7\x87\xaf\x96\x51\x64\xe4\x55\x29\x98\xc1\x21\x1c\x7a\xb9\x4e\xc6\xe6\xc0\x5d\xbc\xed\x46\xfe\x1b\xaa\x4b\xd4\x78\x4b\xa5\xa9\x63\x70\xfe\xa3\x01\x16\x99\xa7\x5d\xd6\x2b\xbe\xb4\x92\xfa\x1d\xbb\xde\xf1\x6e\xef\xff\x19\x96\x39\xcb\xe3\x9b\xfa\x7f\xc4\xd4\xdd\x05\xa0\x12\x76\x97\x11\xe8\x21\xb9\x39\x26\x98\x0e\xf7\x93\x6d\x70\x0f\xf6\xbc\x70\x8b\x03\x43\x79\x1e\x7f\x0c\x47\x85\xea\x6a\xe1\xe9\x90\xf0\x74\x48\x78\xd4\x87\x04\x7b\x3d\xd6\xbd\xf3\xbf\xa3\x9d\xb6\x2d\x29\xbb\xc7\x2e\x8a\xeb\x43\xae\x5a\x6e\xb2\x51\xb6\xe0\x6b\x55\xee\x59\x67\xfb\xf6\x63\xff\x33\xd0\xad\xdf\x43\x3e\x06\xec\xdd\xb9\x59\x7d\x82\xe0\x27\x08\x7e\xd4\x10\xec\x7e\x1d\x18\x76\x07\x53\xdd\xa5\xdc\x3b\x66\xbb\xa5\x58\xdc\x93\xbb\xb5\xf9\x9f\x22\xb8\xab\x79\xcf\x0d\xd9\xd0\xf3\xf5\x35\x21\x55\x14\x1f\x6c\x37\x70\x5e\xb7\x5f\x22\x45\xed\xde\xc7\x7e\x74\x2d\xb3\xf3\xe4\xe8\x5b\x04\x99\xab\xec\xb7\x5a\x30\x6e\x4f\x91\xd3\x9f\x8b\xdf\xf6\x63\x6a\x20\x9c\x6f\xae\xff\x06\x00\x00\xff\xff\xe5\x09\x97\xcb\x6b\x1e\x00\x00")

func templatesViewsSnsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSnsHtml,
		"templates/views/sns.html",
	)
}

func templatesViewsSnsHtml() (*asset, error) {
	bytes, err := templatesViewsSnsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/sns.html", size: 7787, mode: os.FileMode(420), modTime: time.Unix(1489606396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/ses.html": templatesViewsSesHtml,
	"templates/views/sns.html": templatesViewsSnsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"ses.html": &bintree{templatesViewsSesHtml, map[string]*bintree{}},
			"sns.html": &bintree{templatesViewsSnsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
