// Code generated by go-bindata.
// sources:
// templates/views/ses.html
// templates/views/sns.html
// DO NOT EDIT!

package aws

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSesHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\x84\x76\x69\x81\xc8\x96\x8d\xb4\x0f\x8e\x62\xac\x6b\x57\xf4\x61\x01\xba\x26\x4f\x1b\xf6\x40\x4b\xb4\xcd\x8e\x12\x55\x92\x4a\xec\x06\xfd\xef\x3b\x87\x94\x64\x59\x17\xdb\x69\x93\x0c\x05\x22\xa0\x2e\x2f\x87\xe7\xf2\xf1\xe3\xd1\x61\x74\x7b\x4b\x62\x36\xe7\x29\x23\xde\x67\xed\x91\x6f\xdf\x8e\x08\x3c\xa1\x8e\x14\xcf\x0c\x31\xeb\x8c\x9d\x7b\x34\xcb\x04\x8f\xa8\xe1\x32\x1d\x7e\xa6\xd7\xd4\x4d\x7a\x53\x2b\x8a\xcf\xb3\x17\xf3\x3c\x8d\x70\xfe\xc5\x4b\x72\x5b\x0d\xe3\x73\x21\x95\xe2\x7a\xf0\x46\x31\xfa\x62\x7b\x06\x1f\x26\x58\xc2\x52\x33\x21\xc7\xda\x50\xa3\xfd\x98\x09\x7e\xcd\x14\x67\xfa\xf8\xa4\x25\x1c\x53\x43\x27\xe4\xef\xd6\x38\x3e\x10\x86\xa2\xe9\x82\x91\x67\x3c\x8d\xd9\xea\x84\x3c\x43\x85\x64\x72\x4e\x06\x56\x73\x19\x58\xcf\x5a\x3e\x2f\x16\x82\xdc\x09\xf4\x59\x1a\x43\x8b\xb4\x1d\xae\x3f\xc7\x86\x27\xec\x18\x7c\x87\x05\xd6\xdc\xe0\x0a\x06\xa0\x91\x64\x83\xf7\x52\x25\x60\xdf\x1b\x07\xc1\x6b\x3f\x18\xf9\xc1\xf8\x6a\xf4\x6a\x12\x9c\x4e\x82\x57\x7f\x21\xca\x1d\xe1\x6d\xa9\x66\x09\xe5\x42\x83\xf2\x4a\xf7\x3b\x07\xcd\xfa\x8d\x31\x2c\xc9\x76\x47\xd4\x3d\x53\xc5\xd5\x9a\xfd\xa7\xed\xcd\xea\x5f\xb6\x9e\x14\x21\xb6\x67\xd7\x30\xab\x61\x2f\x4a\x3f\x3b\x14\x08\x3a\x63\xc2\xca\xfc\xde\x2b\x93\x49\x9e\x9a\x4b\xfe\x95\x4d\xc8\xb8\x3d\xbb\xe4\x31\xfb\x20\x21\x66\xf0\x83\xe6\x46\x76\xf8\xa1\x98\xb6\xab\x8d\xca\xd9\xf6\xec\xb7\x97\x67\x47\x3f\x40\xc4\x99\x04\x42\x3f\xb1\xb0\xc5\xc2\xdf\x1c\x2e\x4f\xe4\x23\xdb\xe4\xbb\x4f\xee\x45\x32\xc9\x04\x05\xe7\x9e\xe8\xd7\xa4\xdf\xdb\x0a\x9a\x27\x06\x92\x87\x63\xa0\x62\x9f\x59\xf4\x44\xbf\x16\xfd\x3e\x39\x5c\x9e\xb8\x47\xf6\x70\xaf\xd9\x0e\x87\xae\x66\x9c\x1e\x6d\x90\x38\xaa\x95\x9e\x91\x4c\x0d\x10\xd0\xd6\x9f\x61\xcc\xaf\x49\x24\xa8\xd6\xe7\x9e\x92\x37\x45\x99\x59\x1f\x8d\xa4\xf0\xc5\xc2\x1f\x8d\x6b\x25\x68\xb8\x1c\x95\xd3\x19\x5d\x30\x7f\xc9\x68\xcc\x94\x37\x7d\x93\xd0\xaf\x32\x25\x97\x1c\x12\x07\x23\x16\x0f\x72\xc9\xd4\x35\x8f\x58\x38\x5c\x8e\x0a\xe5\x43\xd0\x3e\x3d\x2a\xfe\x3b\x72\x64\x1c\x30\xa5\xa4\xd2\x4d\x97\xa8\x60\xca\x10\xfb\xeb\xc7\x48\x77\x55\x76\xb8\x4e\xb8\xd6\x74\x26\x58\xe9\xf3\x2c\x37\x06\x8c\xbb\x2a\xda\x75\xbc\x2a\x08\x21\x35\xf3\xec\x81\x2a\x97\x16\xca\x3d\x42\x15\xa7\x3e\xec\x41\xcc\xd2\x73\x0f\x01\xf6\xa6\xbf\x20\x1d\xf4\x59\x38\x74\x6a\x9c\x81\xf6\x89\xb3\x3e\xdb\x23\xb7\xf1\xbe\x84\xa8\xf7\x8c\xd5\x25\x0a\x0d\xc5\xe0\xed\x2d\x48\x20\x00\x0e\x99\xed\xcd\x43\x8c\xc0\x27\x0d\x70\xef\x02\x89\xa7\x73\xf9\xbf\x42\xb4\xe5\x64\x4f\x20\x0b\x43\x06\x0a\x4f\x54\xca\xd3\x05\x09\x06\x41\x33\xa2\x8c\xa6\x4c\x10\xfb\xeb\xeb\x3c\x82\x1a\x48\x77\x30\xd3\xcd\x23\xf7\x40\x8d\x37\xbd\x44\x23\xf6\x9c\x16\x76\xbb\xe5\x67\x32\x5e\xd7\xa9\x3c\x87\xc4\x55\x4a\x60\xdb\x5f\x4a\xc5\x81\xc5\x86\x0a\x8f\x28\x29\x98\x1b\xf6\x48\xc2\xcc\x52\xc6\xa0\x46\x6a\x80\x84\x43\x4b\x83\x45\x1f\x0d\x02\x42\xf6\x42\x76\xee\x0d\xe9\x8d\x1e\x6a\xa6\x6b\x16\x9a\x6e\x58\x23\x0b\x25\xf3\xac\x21\x64\x05\x6d\x3a\x21\x20\x03\x40\x4b\xaf\x7e\x08\x75\xe2\x8f\x09\x9e\x5d\x85\x27\x12\xc5\xbc\xe9\x7b\x25\x93\x70\x68\x3b\x1d\xba\x1a\xa7\x18\x14\x8c\x82\x0e\x9b\x56\x96\xa7\x59\x5e\x5e\x41\x99\x8b\xa9\xee\x6f\x61\xd7\xc5\x3d\x07\xab\x1e\x49\x69\xc2\xca\x36\xd4\x09\x11\x5b\x4a\x01\x59\x00\x96\xaf\x28\x9e\xff\xd1\xaf\xb1\xc4\x3d\x1e\x44\x28\x71\x4d\x45\x0e\xe2\xc8\x10\x84\x0d\x1d\x87\x5d\xef\x42\x60\xb3\x79\xbb\x86\x1e\x08\xd0\x2b\x79\xff\x70\x1a\xb6\x32\x3b\xd0\x44\xaf\x1c\x96\xd8\xda\x87\xe4\x09\x29\x06\xc7\xbb\xe0\xbd\x92\x8f\x0e\xae\xce\x67\xf8\xbe\xde\x8b\xf0\xa5\x93\x7b\x74\x98\x2b\xff\x1c\xd6\x55\xb7\x81\x5c\xe1\xde\xe3\x73\x13\x62\xd8\x8b\xdd\x5b\xf7\xe6\xb6\x01\xdf\x0f\x80\x1a\xaa\x51\x88\xb6\x13\x35\xa8\x07\x60\xec\xb4\x62\xa7\xf5\xd0\x32\x16\x5b\xdd\x0a\xad\x52\x99\x61\x32\x2c\x91\xb5\x77\x08\xcf\x65\x7e\xf6\xa5\xe0\x27\x68\x20\xc5\x0c\xd6\x9d\xce\x0d\x16\x57\xaf\x8a\xe9\x47\x9c\x23\xb8\xa7\xe1\xd0\xe9\x3b\xd8\xe0\xd2\x24\xa2\xd3\x9e\x9d\xe8\x36\xf7\xe1\xea\xe2\x8f\xdd\x86\xa0\xaa\xb2\xab\x1e\x95\x15\xc5\xcb\x74\x2f\x31\x2e\x9c\xdc\xfd\x70\x02\x41\xa7\x70\x77\x39\x88\x15\x95\x87\x48\x8c\xb2\x33\x2d\x4f\xd3\x45\x55\x0c\x84\xc3\x52\xed\xc3\x03\xd8\x15\x2c\x29\x5a\x72\x3e\xd7\xcc\xf8\xe3\xdd\x19\xa5\x48\x18\x09\xaf\xe7\x0b\xdb\x73\xb9\xa6\xec\x15\x8c\xc3\xd2\xa3\xda\xa3\x99\x49\x09\xfc\xf3\x33\xc5\x13\xaa\xd6\xdf\x95\x46\xc2\x21\x46\xd8\x55\x2f\xd7\x8a\xa9\xbe\x8a\x09\x6b\xc0\x03\xca\x25\xb8\x63\x71\x6d\x78\xa4\xef\x54\x2e\x35\xee\x0b\x44\x9b\x35\x96\x48\x10\xe9\x82\xa7\x93\x26\xa7\x9a\x5b\x91\xc4\xfe\x6b\x7b\xa8\x7d\xc1\xe6\xc6\xb5\x6e\xa8\xb2\x75\xa0\x4e\xa8\x10\x95\xc2\x8c\xc6\xe8\x27\x6a\x0c\x35\x30\x2f\x5d\x94\xa4\xc2\xdc\x0c\xb7\x8a\x14\x12\x43\x31\xb1\x87\x2c\xdb\x86\x15\x5f\x2c\x0b\xcb\x49\x0e\x39\xe0\x30\xbb\x9b\x72\x15\x8c\x7f\x2a\x3b\x7d\x1e\x34\xbb\xdf\x0f\x5a\xa6\xe4\x42\x61\xf9\xbb\xbd\x06\xb6\x05\xaa\xee\x64\x12\x9c\xed\xe1\x7f\xb9\xde\x9f\x51\x45\xea\x1d\x77\x53\xd8\x1a\x81\x58\x78\x06\x80\x60\x2d\x7b\xcd\xca\xe2\xb7\x14\x01\x89\xe2\x22\x60\x49\x9f\xca\x9b\xea\xa5\x69\x3e\x32\x15\xb9\x8d\xa9\x8b\x24\x1c\x0a\xe2\x60\x6b\x84\xae\xce\xbd\x51\x10\x54\xd1\xdc\xf0\xd8\x2c\x27\x6d\x35\xcf\xcf\x60\xb1\xef\x66\xc7\x2c\xe9\x39\xac\xb0\x0e\x0e\x59\x6a\xe6\xc4\x7b\x3e\x08\xe6\x5e\x4b\xcb\x77\x9d\xbc\xbb\x6c\xdd\x38\xc8\x56\x24\x20\xbe\xfb\x7f\xc7\x3e\x0a\x38\x6a\xfd\x09\x4b\xc3\x59\x6b\x4b\xfa\xdc\xf4\x86\x8e\x19\x07\xd9\xf8\x25\x97\x86\x4e\x7a\xde\xed\x35\xad\x59\x2e\x44\x1f\xf5\xa7\x21\x4b\xa6\x98\xad\x49\xc1\xf8\x72\x91\x95\x74\xd7\x6e\x97\xd2\x61\xff\xc6\xa7\x1f\x64\xae\x2e\x5d\x0e\xaa\xf8\xef\xee\x5d\x9a\x64\x70\x41\x1f\x9f\x92\x25\x88\x60\x9b\xcb\x38\x1c\x82\x72\x90\x03\x5f\xba\x12\x61\xcf\xf8\xdd\x01\xf9\x13\x81\x20\xb9\x66\xf1\x7d\xa0\x51\x3b\xfa\xbb\x19\x56\xcb\x00\x8f\x13\xe7\x05\x5d\x11\xbb\x57\x8a\x1a\x76\x8f\xa1\xee\xda\x73\xdc\xed\x4f\x60\xae\x63\xc7\xa1\x28\x82\xca\xe0\xee\xbb\xfc\xe3\xa7\xce\x1f\xbd\xc2\xdf\x4d\x7b\xcf\xab\x47\x2c\xfc\xd7\x7b\x92\xe5\x0d\x13\x82\xe0\x0f\x14\x0a\x7d\xf5\xc1\xf2\x74\x0b\x29\xe4\x01\x22\xf5\xae\xfa\x96\x1a\x0e\x97\xa7\x3d\x6b\xd1\x94\xad\x2c\x1a\x9f\x5f\xbd\xae\x37\x58\x07\x2c\x7d\x43\x8f\x1a\x69\xf1\x51\xea\xe0\x30\x8b\x8f\x7b\x3f\x55\x8c\x9b\x2f\x1f\x07\x87\xb9\xf9\x8e\xf4\x53\x45\x5a\xfc\x91\xfd\xe0\x30\x8b\x8f\x15\x3f\x10\x63\xbd\xda\x6c\xfd\x25\xd8\xbd\x56\xfe\x0b\x00\x00\xff\xff\x8e\xbb\x62\xf3\x27\x21\x00\x00")

func templatesViewsSesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSesHtml,
		"templates/views/ses.html",
	)
}

func templatesViewsSesHtml() (*asset, error) {
	bytes, err := templatesViewsSesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/ses.html", size: 8487, mode: os.FileMode(420), modTime: time.Unix(1489617528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSnsHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xdd\x6e\xe4\x34\x14\xbe\x9f\xa7\xb0\xb2\x0b\x02\x89\x34\xdb\x85\x0a\x98\xce\x44\x1a\x6d\x2b\xb4\x02\x96\x15\x5d\xb8\xf7\xc4\x9e\xc4\x6a\x12\x5b\xb6\x67\xda\x52\xcd\x0d\xd7\x3c\x03\xef\x00\x57\xdc\xc0\x33\xcc\xbe\x11\xc7\x4e\x32\x75\xa6\xf9\x6b\xb7\x45\xa5\x6a\xa4\xdd\x66\xec\xf3\xef\x73\xbe\x63\x3b\x97\x97\x88\xd0\x05\xcb\x29\xf2\x12\x8a\x89\x87\xd6\xeb\xd1\x44\xe9\x8b\x94\x22\x7d\x21\xe8\xd4\xd3\xf4\x5c\x07\x91\x52\x5e\x38\x42\xf0\xec\x29\x1a\x69\xc6\x73\x5f\x33\x0d\x34\x97\x76\xd0\x3c\x19\x96\x31\x83\x61\x2e\xc6\x68\x9f\x66\x87\xdb\x89\x84\xb2\x38\xd1\x63\xf4\xb2\x1a\x5c\x8f\x76\x24\x71\x9e\xce\xb1\x74\x64\x09\xae\x98\x99\x1a\x23\x49\x53\xac\xd9\x8a\x5e\x89\x33\xf6\xf8\x38\x65\xb1\x99\x35\x92\x0f\x77\x4c\x18\xa3\x17\xe8\x4b\x71\x0e\xff\xbf\xa8\xf4\x4d\x02\xeb\x51\x38\x02\x6f\x69\x4e\x8c\x8f\x23\xc7\xf1\x88\xe7\x9a\xe6\xba\xf0\x9d\xb0\x15\x8a\x52\xac\xd4\xd4\x93\xfc\xac\xf4\xda\x1d\x8d\x78\xea\xa7\xb1\xbf\xff\xb2\x9c\xb3\xf3\xc9\x7e\x35\x2d\x70\x4c\x7d\x13\x4a\x2a\xbd\x70\x96\xe1\x5f\x78\x8e\x4e\x58\x26\x20\x58\x6f\xb8\x66\x0b\x16\x61\xe3\x1a\x3a\xa1\x72\xc5\x22\x3a\x09\x92\xfd\x52\x47\x00\x4a\xc2\x51\xf9\xa7\x30\x44\xf2\xd4\x2c\x01\x9e\x0b\x9c\xd3\xb4\x32\x66\x99\x56\xca\x72\xbc\x42\xf0\xcf\x07\x0a\xe5\x5d\x51\xa7\x4c\x69\xd7\xba\x94\x95\x73\x42\x52\x05\x9e\x5a\x0b\xbc\x4a\x08\x8e\x4c\x84\xbd\x70\x82\x51\x22\xe9\x62\xea\x3d\x53\x85\x6d\x20\x12\x4b\x86\x7d\x13\x1f\xe0\x07\xd2\xab\x89\xad\x2e\x0f\x11\xac\x31\x2c\x62\x1c\x57\x23\x61\xe9\x9b\x9a\x04\x38\x9c\x04\x29\xeb\x35\xc5\xd1\x8d\x85\x48\xcb\x18\x5d\xd7\x5f\x9f\xec\xb4\x61\xe6\x90\xde\xc6\x0e\x48\x64\x16\x5d\xb7\xa0\x1a\xee\xd4\xfd\xce\x12\xdd\x46\xab\x5a\xce\x55\x24\x99\x68\x76\x7f\x67\xb6\x7b\x0d\x5c\xda\xba\x29\x93\x60\x99\x86\xa3\x6b\x89\x0d\x6c\x7e\x55\x0a\x8e\xcd\x0d\x79\xe8\x72\x98\x11\x54\xa6\x10\x62\xc4\xc9\x91\x2b\x19\x0d\x9a\x52\xea\x43\x08\x04\xd8\x66\x73\xaf\x46\x6a\xc9\x2d\x4d\x8d\x01\x15\x6c\x09\x5f\x51\x59\xbe\x2b\x0d\x1e\x52\xd2\xc0\x5f\xc8\x30\x75\xd8\x3a\x17\xce\xac\xd5\x48\x6d\xb3\x15\xc6\x9a\x89\x83\x4e\x49\x73\x4e\x2e\x9a\xe7\x00\x64\x24\xce\x63\x8a\x9e\xe7\x38\xa3\x9f\xa1\xe7\xa5\x2e\x34\x9e\x1a\xfc\x2b\xf4\x1a\xd8\x69\x16\x2c\x9b\xa5\x16\x93\x24\x04\xe9\x56\x2e\x08\x00\x0b\xdb\xcc\x0b\xda\xc4\x5c\x81\x61\x0b\x5f\xb3\x5f\x30\x61\x62\xbf\xb3\xba\x05\x6a\xb5\xfd\x1c\x90\x43\x45\xf2\xd4\x0a\xbc\x3d\x81\x6a\x4d\xa8\x29\x7b\x9a\x68\x8b\x36\xd3\x96\x2b\x0b\x2e\x33\x94\x51\x9d\x70\x30\xe3\xed\x0f\x27\xef\x5a\x08\x2d\x31\xcb\xc5\x52\x97\x0d\x32\x61\x84\x50\x40\x53\xb3\x12\x53\x6f\x29\xa0\x14\x01\xfa\xd1\x0a\xa7\x4b\xba\x8b\x58\x41\x87\xcc\xf9\x52\x6b\xe8\x0b\x85\x50\xa8\xf4\x8c\x41\x47\xe2\x79\x04\xec\xa7\xd5\xc0\x27\x9f\x1e\x6e\x03\x37\xd7\x39\x82\x7f\xbe\x90\x0c\x1a\xdf\x85\x7d\x3f\x57\x5e\xab\x82\xea\xb1\x50\x01\x52\xc5\x9c\x63\x49\xa0\x75\xc8\x98\xea\xa9\x77\xc6\x08\xfc\x05\x00\x20\xd4\x87\xe8\x0d\x94\xb3\x85\x1c\x08\xae\x66\x62\x28\x17\x34\xee\x98\x4a\xe8\xa5\xc6\xb9\x81\x4c\x22\xc5\x11\xcd\x00\x9c\x2c\x08\xf7\x33\xd9\xdc\x98\x7a\x9b\xdf\x37\x7f\x6c\xfe\xde\xfc\xb3\xf9\x73\xf3\xd7\xfb\x5f\xdf\xff\xd6\xb1\xac\xe6\xd9\x25\x6f\x5f\xaf\xa0\x58\xb0\xb6\xaa\x33\xf9\xd4\x54\x3c\xb5\xc2\x68\x1b\x7a\x58\x58\x59\xce\x87\xcf\xda\x11\xb2\x22\x79\x3d\xfb\xbe\x9f\xc8\x69\xcd\x68\xf6\xe3\x9b\x7e\x86\x57\x54\x96\x3b\x27\x8a\xe8\xb9\x60\xd2\xf2\xf6\xf3\x1d\xe7\x44\x70\x96\xeb\x0e\x68\xaf\x48\xbf\xc3\x4a\xa3\xa2\x78\xef\xb5\x0f\x30\x68\x02\x0e\x26\xd8\x46\xe0\x62\x44\x47\x33\x00\x29\x6c\x81\x72\xae\x6b\x12\xf6\x8e\x73\xb3\xbc\x64\xbd\x2e\xd7\x9f\x18\x45\xd2\xbb\xbc\x04\x70\x5f\xaf\x7b\x3b\x08\x26\x04\xac\x42\xfb\x9d\x4d\xa4\xa4\xdf\xa6\x98\xd9\x83\x47\x50\x8a\xb4\x0d\x4e\x1d\xc7\xc1\xe6\x9a\xbd\xaf\x15\x24\x49\x9b\x9b\x5b\x65\x0a\x7a\x42\xa5\x2e\x4e\x2f\x44\xc2\x60\x6b\x82\xb6\x6f\x3e\x3f\xf5\x90\xdd\xd4\xdb\x0d\x39\x97\x63\xf4\xec\x20\x9a\x7f\x75\x10\xc1\x6e\x2a\x30\xcc\xbd\x76\xd1\x54\xd1\x0f\x36\x43\xd2\x8c\x9b\x8d\xcf\x8e\x29\xe4\xeb\x83\xcf\xbf\x58\x0c\x37\xa5\xbd\x0d\x5b\x2b\xfa\xd6\xc5\xee\x04\xdc\x18\xcf\x64\x3e\x64\x3d\x6f\xbc\x76\x4e\x21\x1e\x6f\xeb\xf0\xc8\x94\x65\x4f\x20\x4b\x79\x77\x23\x6c\xe0\xe2\x99\xe7\xe3\x8c\x60\x95\x1c\xde\xfb\x02\x74\x67\x91\x03\xe7\x42\xf2\x18\xc0\x7c\x77\x73\x33\x94\xcd\x37\x07\x65\xf7\x87\xaf\x96\x51\x64\xe4\x55\x29\x98\xc1\x21\x1c\x7a\xb9\x4e\xc6\xe6\xc0\x5d\xbc\xed\x46\xfe\x1b\xaa\x4b\xd4\x78\x4b\xa5\xa9\x63\x70\xfe\xa3\x01\x16\x99\xa7\x5d\xd6\x2b\xbe\xb4\x92\xfa\x1d\xbb\xde\xf1\x6e\xef\xff\x19\x96\x39\xcb\xe3\x9b\xfa\x7f\xc4\xd4\xdd\x05\xa0\x12\x76\x97\x11\xe8\x21\xb9\x39\x26\x98\x0e\xf7\x93\x6d\x70\x0f\xf6\xbc\x70\x8b\x03\x43\x79\x1e\x7f\x0c\x47\x85\xea\x6a\xe1\xe9\x90\xf0\x74\x48\x78\xd4\x87\x04\x7b\x3d\xd6\xbd\xf3\xbf\xa3\x9d\xb6\x2d\x29\xbb\xc7\x2e\x8a\xeb\x43\xae\x5a\x6e\xb2\x51\xb6\xe0\x6b\x55\xee\x59\x67\xfb\xf6\x63\xff\x33\xd0\xad\xdf\x43\x3e\x06\xec\xdd\xb9\x59\x7d\x82\xe0\x27\x08\x7e\xd4\x10\xec\x7e\x1d\x18\x76\x07\x53\xdd\xa5\xdc\x3b\x66\xbb\xa5\x58\xdc\x93\xbb\xb5\xf9\x9f\x22\xb8\xab\x79\xcf\x0d\xd9\xd0\xf3\xf5\x35\x21\x55\x14\x1f\x6c\x37\x70\x5e\xb7\x5f\x22\x45\xed\xde\xc7\x7e\x74\x2d\xb3\xf3\xe4\xe8\x5b\x04\x99\xab\xec\xb7\x5a\x30\x6e\x4f\x91\xd3\x9f\x8b\xdf\xf6\x63\x6a\x20\x9c\x6f\xae\xff\x06\x00\x00\xff\xff\xe5\x09\x97\xcb\x6b\x1e\x00\x00")

func templatesViewsSnsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSnsHtml,
		"templates/views/sns.html",
	)
}

func templatesViewsSnsHtml() (*asset, error) {
	bytes, err := templatesViewsSnsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/sns.html", size: 7787, mode: os.FileMode(420), modTime: time.Unix(1489606396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/ses.html": templatesViewsSesHtml,
	"templates/views/sns.html": templatesViewsSnsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"ses.html": &bintree{templatesViewsSesHtml, map[string]*bintree{}},
			"sns.html": &bintree{templatesViewsSnsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
