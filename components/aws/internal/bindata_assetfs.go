// Code generated by go-bindata.
// sources:
// templates/views/ses.html
// templates/views/sns.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\xc8\x15\x7e\xf7\xaf\x38\x60\x1d\x50\x2e\x2c\x51\x96\xe3\x5d\x40\xa1\xd4\x7a\xd3\x2c\x36\x40\xd3\xa6\x91\xd1\x87\x0d\x0c\x63\x44\x1e\x89\xe3\x0e\x67\x98\x99\xa1\x2c\xaf\xc0\xff\x5e\x0c\x6f\xa2\xa4\x11\x2d\x6d\x9d\x22\x0e\x96\x2f\x1a\x72\xce\xf5\x3b\x97\xb9\x68\xb5\x82\x10\x67\x94\x23\x38\x81\xe0\x1a\xb9\x76\x20\xcb\x4e\xfc\x90\x2e\x20\x60\x44\xa9\x91\x93\x90\x39\x76\x35\xd5\x0c\x9d\xf1\x09\x00\x40\x73\x32\xff\x7e\xc7\x70\xa6\xcb\xc9\x9c\x20\xba\x1c\x5f\xc7\xe4\x37\xc1\x61\x42\xe3\x84\x21\xbc\x8b\x09\x65\x30\x41\xb9\xa0\x01\xfa\x5e\x74\x59\x4a\xf2\x42\xba\x18\x9f\x94\x3f\x1b\x5a\x03\x86\x44\xce\xe8\xd2\x19\x57\xb3\xab\x15\xd0\x19\xcc\x35\xf4\x24\xc6\x84\x72\xca\xe7\xd0\xef\xf5\xb7\xcd\x95\xe2\xc1\x62\x67\x20\x58\x37\x0e\xbb\x17\x03\x30\x23\x15\x57\xa3\xa5\xea\x5e\x0c\x9a\xa6\x37\x78\x96\x77\x09\xe1\xc8\x1a\xb3\xbb\x14\x4d\x5c\x36\xa8\xa2\xc1\x78\x82\x3c\x84\xc9\x87\x89\xef\x45\x03\x0b\x45\xca\x2a\x31\x9c\x2c\x80\x93\xc5\x94\xc8\xae\xa4\xf3\x48\x43\xae\xf7\x4e\x0b\xc1\xa6\x62\x69\x91\x9e\xf3\x33\x3a\xf6\x49\xc3\x3f\x46\x12\x85\x5d\x46\xf9\x7f\x9c\xb1\x4f\xab\x89\x19\x81\x19\xe9\x06\x11\x2e\xa4\xe0\xdd\x34\x31\x78\xd2\xb1\xef\x91\xb1\xef\x31\x6a\x31\xcb\x4b\x99\xe5\x6b\x5b\x64\x36\xd9\x77\x3f\x6d\x00\x56\x65\x99\x45\xc7\x4c\xc8\xb8\x36\x5b\xc8\xb8\x1b\x09\x49\x7f\x13\x5c\x13\x06\xf9\x3b\x23\x53\x64\xdd\x3c\xd9\x40\x0a\x86\x05\x99\x03\x31\xea\x48\x84\x23\x27\x11\x4a\x3b\x40\xc3\x91\xa3\x90\x87\x5d\x93\x73\x0e\x90\x40\x53\xc1\x47\x8e\x47\x1e\x94\xa7\x50\x39\xc0\xc5\x82\x30\x1a\x12\x8d\x7b\x90\x6d\x18\x4c\x35\xc6\x85\xf2\xb9\x14\x06\x3d\x2b\x47\x11\x0f\x63\x9d\xa1\x1d\x39\x33\x29\x62\x67\x1d\x1a\xae\xa5\x60\x85\xf5\x50\x26\xe2\x65\x95\x87\x97\xd6\x34\xb4\x3d\x3f\x4b\x11\x83\xaf\x12\xc2\xeb\x54\xc7\x2f\x29\x95\x18\x3a\xe3\x3f\xfb\x9e\x99\x68\xb1\xce\xcb\xd5\xb7\x10\xec\x16\xcb\x0f\x95\x8d\x3f\x1c\x6c\xa3\x4f\x79\x92\x6a\xd0\x8f\x09\x8e\x1c\x8d\x4b\xed\x6c\x04\xb4\x84\xa2\x88\x51\x01\x12\x27\x31\x56\xe3\x84\x91\x00\x23\xc1\x42\x94\x23\x07\x97\xc4\xb4\x8e\x8b\xbf\x86\xc2\x54\x7b\x2f\x30\x14\x0b\xc2\x52\x1c\x39\xab\x15\xf4\x4c\x88\x73\x48\xb2\xcc\x81\x0a\x89\x26\x26\x2d\x58\xec\xe4\xe8\x21\x53\xff\x73\x56\x68\xf1\xec\x39\x71\x23\xbe\xa7\x8c\x30\x00\x15\xf9\x60\x46\x4f\x65\xc3\x39\x94\x1f\x07\x6d\x29\x72\x23\x5e\x4e\x82\xa8\x74\x7a\x8f\x81\x7e\xf6\x2c\x99\x14\x72\xbf\xa7\x54\xa9\xa1\x2a\xf2\xa5\x7e\xdd\x8a\x7e\xe5\xf9\x8b\x49\x01\xe3\xfc\xb3\xc7\xff\x6d\xb1\xe6\xe6\xc8\x7e\xf3\x49\xa0\x90\x99\x88\x59\x22\x0f\xc5\xd4\xc0\x01\xa5\x1f\xcd\xea\xff\x40\x43\x1d\x0d\x2f\xfa\xfd\x57\x75\xdf\xc8\xe1\xcb\x7b\x49\x3e\x3a\x2a\xe6\xb5\x09\x22\x31\x5b\x86\x2a\x97\x12\x46\x28\x77\x8a\xdd\x27\x7e\x29\xbb\x8a\x41\xb2\x9c\x81\x2c\x2b\x2d\xc3\x70\xb5\x02\xb3\xe9\xcb\xb2\xf1\x47\x33\x07\x26\x8b\x7d\xaf\x90\x77\xb4\xe2\x48\xc7\xcc\xaa\x37\x9f\xb0\xab\xfd\xe5\xe6\xc3\xdf\x0f\x53\xe8\x7b\x05\xf7\xb7\x57\x03\x31\x2a\x45\xe6\xcf\x5f\x06\x1f\x0a\xb9\xdf\x7c\x05\x98\xa4\x21\x12\x89\xbd\xfb\x49\xf1\xa0\x46\xce\xeb\x2a\xe3\x6b\xb0\x4c\xd2\xd7\x2f\xb6\xbc\xaf\x7a\x62\x05\x43\x96\xf9\x5e\xa5\xea\x6b\x26\x01\xe3\x77\x4a\x30\x1a\x5a\xcf\x0b\x36\x86\xc3\x12\x66\x1f\xd6\x71\xd8\x15\xb3\x99\x42\xdd\xbd\x7c\x0a\xe8\x69\xaa\xb5\xe0\xe5\x82\x23\x51\xe1\x7a\xc5\x99\x6a\x0e\x53\xcd\xbb\x94\xcf\x44\xbd\xaa\x14\x24\xe3\x4f\xe6\xc7\xf7\x0a\xee\x63\x54\xa8\x74\x1a\xd3\x5d\x1d\x2a\x0d\x02\x54\xca\xc9\x0f\x8c\x4f\xcb\x3d\x3e\x22\xbe\x67\x20\x6d\x3d\xa8\x35\x5e\x5b\x0e\xe5\xad\x67\xeb\x27\x52\xfd\x39\x4f\xd6\xff\x4a\x85\x26\x7f\x1c\xab\x0f\x3b\x56\x1b\x3a\xd3\x1c\xbe\x18\xd0\xea\xb5\x33\x42\x03\xc9\xf0\xb2\xdf\x4f\x96\x6f\xd6\x97\x2c\x36\xee\x3d\x40\xad\x81\x66\x54\xe9\x2e\xe5\x8c\x72\x84\x07\x1a\xce\x51\xdf\x69\xc2\xd8\x63\x6b\xbf\xb7\x80\xb4\x41\x90\x1c\xb0\x5e\x36\x1b\x79\x2c\xb8\x8e\x8a\x1a\xa2\x7c\x0e\xb9\xb7\x90\xa0\x84\xc1\x6b\x88\x44\x2a\xcd\x98\x8a\xf0\xa9\x26\x6f\x95\x1d\x88\xd4\x60\xeb\x63\x3c\xf6\x95\x96\x82\xcf\xeb\xfb\x2f\x5c\xea\x6e\x48\xf8\x1c\x65\xd1\x61\x63\xb2\x1c\xbc\xfe\x45\xa4\x72\x52\xac\xc8\xbe\x57\x30\x8c\x01\x63\x42\x99\xf2\x3d\x23\xe4\x00\x23\x7c\xaf\x05\x01\x7b\x92\xd5\xb3\x5f\x0b\xdc\x0f\x64\x09\x66\x09\x01\x49\x34\xfe\x1f\x90\x34\x18\x7e\x22\x1a\x2d\x38\x7a\x0a\x03\x61\xda\xe5\xd7\x85\x73\x4f\xdd\x3e\x59\xa1\xbb\xfd\xf4\x1b\x68\x9b\x13\x4d\x34\x55\x9a\x06\xea\x8f\xde\x79\x5c\xef\x54\x9a\x68\xb5\xd3\x3b\x7f\x1c\x34\x7b\x67\x8b\xce\xbd\xab\x6b\xbd\x71\x6f\x8c\x4e\x1a\x77\xf2\xf7\xaa\xb8\x8e\x57\x81\xa4\x89\x06\x25\x83\x91\xe3\x85\x44\x45\x53\x41\x64\xe8\x11\xa5\x50\x2b\x6f\x81\x3c\x14\x52\x79\xe5\xb5\xa6\x90\xde\x7d\xe3\xa5\x17\x53\xde\xbb\x57\x7f\x59\x8c\x4c\x55\x5d\x27\x09\xa3\x01\x31\xe7\x83\xde\x34\xa5\xcc\xa8\x34\x2e\x14\x1a\xc6\x87\xaa\xc2\x20\x22\x52\x2b\xa3\xa8\x1c\x1e\xa7\xa6\xd6\x53\xec\x8c\xc8\x9a\xdc\xbb\x27\x0b\x52\x4c\x96\x11\x39\xed\x84\x22\x48\x63\xe4\xfa\xac\x27\x91\x84\x8f\x9d\x59\xca\xf3\x5b\x5d\xe8\x9c\xc1\xaa\x46\xb9\x38\x2a\xf5\x50\x4a\x21\x95\x81\xad\x31\x21\x4d\x63\x81\x53\xca\x43\x5c\x9e\xc3\x69\x4e\x03\xc3\x91\x8d\x9a\xe3\x03\x7c\xfc\x87\xd0\x74\xf6\xd8\x59\x6d\x44\x35\xaf\xad\x21\xb8\xef\x0c\x8f\x7b\xbe\x39\x87\x4b\x3d\x04\x77\xb5\xaa\x84\x67\xd9\x36\xc5\x63\x62\x98\xd1\xc2\x1c\xd1\x10\x87\x30\x23\x4c\xe1\xe6\x84\x49\x38\xca\xe7\x43\x70\xa7\x42\x68\xa5\x25\x49\x2e\xdd\x9a\x22\x3b\x7b\xd3\xf0\x11\x79\xb8\xe9\x73\x95\x4f\x5b\xf8\xc4\xf5\xfe\xff\x08\x97\xdf\xf3\x99\xd8\xeb\x71\x43\xa4\xdd\xe7\x72\x87\xfb\x35\xbc\xde\xf1\xf2\xb4\xe3\xfe\xa9\xbe\xfe\x77\xcf\x7a\xc5\xa6\x7b\x4f\xca\x98\x67\x41\x24\x20\x83\x11\x9c\x76\x74\x44\xd5\xd9\x9b\xcd\x5d\x10\x9d\x41\x07\x59\x2f\x24\x9a\x74\xdc\xbc\xa8\xdc\xb3\x6d\x11\xe6\x41\x56\xa9\x6a\xd8\x97\xdb\xbb\x29\x4f\xa2\x4e\x25\x2f\xdc\x7e\xb3\xe1\xd4\x49\xd3\xa2\x7c\xff\xf2\xd6\x54\x16\x8c\xa0\x2a\x31\xca\xa9\xae\x8b\xa1\x37\x47\xfd\x8e\xa1\x19\xfe\xf4\xf8\x3e\xec\xb8\x39\x8b\x7b\x76\x5e\x91\xdf\x44\x18\x63\xc3\x98\xb5\xc8\x9e\x42\xfd\xcf\xfc\x8e\x60\x3b\xdc\x42\x30\x4d\x93\xa1\xc5\x3f\x2d\xe9\x7c\x8e\x72\x08\xae\x39\xd5\x6f\x85\xd2\x3c\xe6\x8c\x41\xb4\x36\x24\xce\x6a\x9a\x0d\x61\x15\x64\xd0\x59\x85\xd9\xab\x33\x67\x13\x90\xf3\x1d\x9d\x53\xb1\xb4\xe9\x54\x91\x78\x18\x82\x96\x29\x5a\xd4\x21\xd1\xa9\x44\x1b\x5b\xce\x4a\x16\x78\xad\xde\xc7\x64\xbe\x97\xe4\x29\x0d\xb5\x81\x65\x0d\x4c\xc8\x02\x2d\x7e\x57\x8f\x39\x8f\x0f\xa1\x8c\x82\x95\x2a\xdb\xf9\x9a\xb5\x01\xa3\x50\x52\x54\x43\xf8\x6c\x09\x46\x51\x57\x09\xb5\x19\x24\x49\x48\x53\xc3\xe7\x5e\x5e\xbd\x72\xcf\xc1\xbd\xba\x7a\xe5\xde\xee\xd2\xe5\xb7\x19\xfb\xc0\xe1\x26\x9a\x7b\x67\x61\x03\xba\x43\x9d\xdd\x35\xc1\x54\xd5\x10\x3e\x5b\x05\xac\x8a\x63\xf7\x10\xca\x8b\x0b\x0d\x59\x76\x5e\xa1\x3c\x41\xae\x5d\x9b\xc4\x1d\xce\xf5\x9f\xc5\x0d\xf6\x4f\xd5\x47\xd7\x62\xe7\xed\x66\x50\x6e\xf7\x17\x69\xbe\x2d\x38\xae\x48\x73\x96\x96\x22\x5d\x8b\x6c\x2d\xd2\xef\xa8\x60\x0a\x44\x9e\xa3\x60\xca\xee\x05\xed\xed\x8b\x2c\xe9\xf6\x4a\x64\x1e\xf3\xf9\xa3\xa0\x5c\xa3\xb4\x0a\x80\xb2\xec\xc0\x98\x1c\x91\x50\x3c\xec\xda\xdc\x6a\x1d\xc3\x39\xf2\xd0\x26\x3a\xaf\x82\xcf\xee\xdf\x90\xd1\x45\x5e\xf3\xee\xb9\xfb\x93\x48\x79\x90\x8f\xde\x8a\x38\xbf\x68\xd6\xe6\xe5\x13\xde\x63\xa0\x95\x7b\xdb\xa6\xc9\xc8\xfb\x55\x88\xf8\xd8\x0c\x51\x9a\x48\xfd\xef\xa2\x74\xf2\x75\x3d\x0f\xcd\xc4\x7c\xed\xfd\x9c\x77\x77\x70\x06\xfd\xfe\x0f\xdd\xfe\x45\xb7\x3f\xb8\xb9\xb8\x1a\xf6\x5f\x0f\xfb\x57\xbf\xf6\x7f\x1c\xf6\xfb\x66\xa3\xea\xb6\x59\xb5\xbc\x5e\x52\x65\x0d\x4d\xd1\xcc\x34\x8d\xb1\x55\xc0\xa3\x4d\xc0\xe1\x3d\xb3\x4c\xb7\x26\xca\xfb\x4c\x99\x92\xed\x1d\x1a\xac\x9b\xd5\xee\x6e\xd2\xc0\x94\x6f\x26\x73\xbc\x20\xcb\x8a\x9d\x56\x31\x6f\xda\x4e\xbd\x4d\xf9\x9c\x6f\x10\x0d\x59\xef\x86\xc6\xa8\x34\x89\x93\x03\xa1\x3d\xaf\x39\x4b\x0f\x1e\xaf\xb5\xc6\x38\xc9\x15\xde\xd6\x1a\xb6\x13\x63\x2f\x0e\x75\x82\xbd\x4c\x10\x4a\xf3\x7f\x9f\xef\xcd\x92\x7a\x99\xee\xaf\x3d\xf8\x7d\x08\x54\x7d\xe4\x85\xba\x5f\x9a\xdf\xe6\xfb\xed\xce\x81\xc1\xfc\xae\x4f\xa0\x35\xdf\x7f\x03\x00\x00\xff\xff\x99\xe5\x39\x8a\x03\x27\x00\x00")

func templatesViewsSesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSesHtml,
		"templates/views/ses.html",
	)
}

func templatesViewsSesHtml() (*asset, error) {
	bytes, err := templatesViewsSesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/ses.html", size: 9987, mode: os.FileMode(420), modTime: time.Unix(1504173411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSnsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6b\x6f\xdb\x36\x17\xfe\x9e\x5f\x71\xa0\xf8\x7d\x63\x03\x91\xb4\xb5\x2b\xb0\xa5\x8e\x06\xa3\x2d\xb6\x02\x6b\x31\xac\xdd\xe7\x80\x16\x8f\x2d\xa6\x32\xa9\x91\x94\xe3\x4c\xd0\x7f\x1f\x48\x5d\x4c\x59\xb2\x73\x6d\xb7\x16\xf9\x92\x48\xbc\x9c\xf3\x9c\xdb\xc3\x43\xb9\x28\x80\xe2\x82\x71\x04\x2f\x16\x5c\x23\xd7\x1e\x94\xe5\xd1\x94\xb2\x35\xc4\x29\x51\xea\xdc\xcb\xc8\x12\x7d\xcd\x74\x8a\x5e\x74\x04\x00\xe0\x4e\xda\xf1\x8b\x14\x17\xba\x9e\xb4\x0b\x92\xe7\xd1\x6c\x45\xfe\x16\x1c\x3e\xb0\x55\x96\x22\xbc\x17\x9a\x2d\x58\x4c\x34\x33\x63\x28\xd7\x2c\xc6\x69\x98\x3c\xaf\x05\x86\x94\xad\xa3\xa3\xfa\x5f\x47\x79\x9c\x22\x91\x0b\xb6\xf1\xa2\xa1\xd9\xcd\x45\x46\x38\xa6\x03\xb8\x36\x17\x2e\xe2\x0a\xd4\xb3\x68\xca\x9a\xf9\x05\x81\x05\xf1\x73\x85\x52\x19\xd1\x2c\x6a\x50\xa9\x69\x98\x3c\x73\x76\xe5\x69\xb3\x85\x93\x35\x70\xb2\x9e\x13\xe9\x4b\xb6\x4c\x34\x58\xdd\x17\x5a\x88\x74\x2e\x36\x8e\x26\xbb\x2f\x65\xd1\x94\xb4\x56\x88\x34\x25\x99\x42\x3f\x65\xfc\x93\xd7\x83\x11\x27\xb8\x96\x82\xfb\x79\x56\x61\x99\x86\x24\x9a\x86\x29\x73\x60\x84\x79\xea\xbc\x1d\x72\x90\xe3\xd0\xbe\x53\x9a\x18\x3b\xb2\x34\x99\xa7\xd8\x86\xd3\xbe\xd8\xbf\xbe\xd2\x92\x65\x48\x81\x12\x4d\xec\xc8\xae\x89\x3a\x41\x42\x77\xc7\x64\x77\xa0\x5e\x18\xcd\x62\xcd\xd6\x08\xaa\x75\xb2\x4e\x76\x76\x86\xbb\x5b\xcd\x9a\x01\x05\x73\x41\xaf\xbb\x63\x45\x01\x92\xf0\x25\xc2\x88\x93\x15\x9e\xc2\xa8\xd6\x02\x67\xe7\x10\x34\x1a\x4d\x56\xdf\x02\x29\x8d\x8a\xa2\x92\x03\x65\x39\x0d\xf5\xae\xfa\x1e\xca\xa2\x00\xe4\xb4\x27\x3d\xdc\xc1\x39\x0d\xad\x0b\x6f\xcc\xf7\xc7\xcc\xe8\x59\x96\xa5\x75\xcd\xfd\x37\xb3\xba\x16\xd9\x6c\xa3\x52\x64\x54\x5c\x71\x6f\x20\x30\x04\x12\x89\x8b\x73\xef\xd8\xdb\x5d\xed\x6b\xb1\x5c\xa6\xe8\xd9\x3c\xad\x5f\x1c\x59\x20\x85\x79\x9f\xe7\x5a\x0b\xee\x01\x91\x8c\xf8\xb8\xc9\x08\xa7\x48\x0d\xd2\x54\x61\x1f\xfa\x95\x44\x1e\x27\x5b\xd8\x7d\x3c\x5b\x07\xb6\x38\x56\xc8\xf3\x46\x9d\x7d\xee\x6f\x6b\x7c\x38\x38\xd1\xb1\xf3\x92\xac\x89\x8a\x25\xcb\xf4\xd9\x5a\x30\x3a\xfe\x6e\xe2\x01\xa3\xe7\x1e\x71\x62\xea\xe7\x19\x25\xba\xb1\xbc\x7a\x91\xdd\x25\x7b\x30\xb4\xea\x5a\xbb\x97\xe9\x75\x96\xb0\x58\x70\x68\x9f\x7c\x89\x0b\x89\xaa\x76\x03\xfc\x69\xe5\xef\x47\x3e\xe4\xa6\x6a\x62\xc8\xe0\x2e\xa1\xf5\xd7\xfd\x1b\x84\x97\x88\x35\xca\x07\x91\x5f\x12\x1d\x0f\x30\x9b\x4e\xa2\xb7\xb3\x77\xc3\x13\x4e\x8d\xc2\xec\x8f\xf7\xc3\x8b\x5e\xa1\xac\x8f\x4f\x04\xdc\x64\x4c\xda\xf5\xc3\x6b\xdf\x70\x9a\x09\xc6\xf5\x10\xc5\xea\x24\xfa\x8d\x28\x0d\x55\xaa\x0c\x72\xf0\x5d\x19\x97\x9d\xc2\xc8\x49\x38\x4b\xb9\x6e\x02\x0e\xd0\x2e\x14\x05\x5b\x00\x17\xba\xb3\x33\x78\xc3\x8d\x9b\x69\x59\x36\x75\x65\x14\x48\xaf\x28\x90\xd3\xb2\xdc\xcb\xd5\x84\x52\x18\x31\xf8\x7e\x90\xae\xeb\x75\x6d\xb0\x71\xa3\xfd\x18\xb9\x46\xb9\xa7\x30\x8a\x02\xd8\xa2\x8b\xeb\xad\x7a\x3b\x7b\xb7\x6b\x46\x2b\x5c\x65\x84\x1f\xaa\x21\xf1\xc9\x03\xa5\xaf\x0d\x27\xc4\x22\x15\xf2\x0c\x8e\x5f\xc4\xf3\x1f\x5f\xc4\x26\x7d\xcd\xe6\xbd\x38\x30\x55\x78\x6f\xb5\x12\x57\x62\x8d\x3d\xd5\xf4\xa7\x17\xcf\x7f\x58\xdc\xac\xba\x7f\xa0\x41\x95\x1e\xc3\xfe\xb5\x67\xa6\xeb\xb3\x99\xe4\x87\xe2\x71\x6b\xdf\x3b\x89\xff\xa6\xcd\xfb\xd7\xa6\x0c\xf6\x38\x66\x17\xc8\x7d\x04\x1c\x72\xfc\xff\x57\x94\xa8\xe4\xe5\xa3\x39\x6e\x38\xba\x6e\xf3\x2d\xc5\x52\xa2\x3a\x44\xe4\x43\xcb\xfd\x39\x91\xe0\xbe\xf8\x2a\x8f\x63\x23\xa7\x49\x89\x15\xe3\xfe\x15\xa3\x3a\x39\x7b\x86\xab\x97\xd5\xd3\xae\xf7\x7e\x41\x5d\x57\xe5\xef\x28\x4d\xdd\x40\x59\xfe\xef\x86\x23\x65\xbf\x8c\x57\x22\xb7\x12\x0e\x1c\x21\x2d\x89\xdf\xdf\xce\x2b\x22\x39\xe3\xcb\xbb\xda\xf9\x9a\xa9\x87\x1b\xda\x08\x79\x88\xa5\x7b\xa6\x6e\x5f\x7b\x86\xe1\xab\xb3\xfa\xeb\xef\x60\x3f\x8a\x8c\xc5\x4f\xbd\xeb\x37\xd2\xbb\x6a\x1b\xcd\x3d\x5d\x6b\x35\xf9\xd4\xaf\x3e\xe4\x82\xbe\x7d\xf2\x63\x43\x41\xbd\x36\xe7\x4e\x57\xf6\x7e\x7f\xd8\xcc\xd8\xb2\xdc\xd3\xae\x3e\xc6\x35\xde\x34\x95\x36\x1f\x6c\x3b\x59\x65\xc6\x5d\xee\xef\xb7\xe9\x09\x2d\x6f\x5a\xd1\x81\x35\x67\x5f\xcb\xf2\x55\xf1\xe5\x87\x7c\x5e\x15\xde\xd3\x95\xff\xdb\xa1\x4d\xe5\x06\x75\x0f\x7b\x76\xd6\x3c\x91\xe8\x17\x27\x51\xb8\x91\x33\xdd\xd2\x1c\xa6\x4e\xd8\xb9\xc1\x3f\xda\xfd\xdc\x4d\x8e\xea\x9b\xa8\x9b\x2d\x9f\x85\x58\x5d\x0d\x81\x6b\xfa\x4d\x37\xc3\xde\xe6\xc6\x1b\x5f\x8c\x9c\xb7\x12\x8e\x9c\x1f\x47\x8c\xdf\xab\x5f\x46\x0c\xf3\xd5\x15\x1b\x9a\xcb\xe0\x5c\x10\x49\x43\xa2\x14\x6a\x15\xae\x91\x53\x21\x55\xd8\xe6\x90\x0a\x38\x6a\x7f\xae\xc2\x58\x55\xa3\x1f\xab\xd1\xb9\x10\x5a\x69\x49\xb2\x60\xc5\x78\x10\x2b\xf5\xf3\xfa\xbc\x28\x20\x70\xbe\x07\x05\xf3\x9c\xa5\x06\x88\x07\x12\xd3\x73\xcf\x5e\x68\x54\x82\x68\x12\xfb\x5e\x30\x16\x6c\x83\xd4\x58\x82\xb2\x81\x64\x87\x7e\xb5\x43\x0f\xc6\x34\xec\xb9\x4b\x55\xf9\xad\x0a\x29\x28\x19\xdf\x1e\x71\x78\xa9\xc2\xcb\xbf\x72\x94\xd7\x81\xe3\x3b\x83\xee\xf2\x20\xb8\x68\x1a\x56\xea\xa2\xfb\xe9\x35\xde\xb9\x3c\x10\xaf\xcf\xac\xdd\x89\xd3\x0e\x0c\x37\x5c\x77\x02\xd2\x22\xd1\xd7\x19\x76\xbe\x11\x87\xdb\x73\xa7\x26\xba\xd1\x98\x8a\x38\x5f\x21\xd7\x93\x40\x22\xa1\xd7\xe3\x45\xce\x63\xcb\x1e\xe3\x09\x14\x6d\x11\x8d\xc6\x27\xc7\x03\xdf\xa3\x4f\x8f\x3b\x8d\xfe\xe9\xf1\xd0\x01\x76\x32\x09\xe2\x94\xc5\x9f\x5a\xd1\xe3\x49\xd1\x29\xd9\x51\x90\x09\xa5\xc7\x27\xc7\x27\xa7\x50\x9c\xd4\x07\xdd\xc9\x19\x8c\xc6\x3a\x61\x6a\x62\xf3\x61\xdc\x8e\x4f\xca\x53\xd8\x4a\x82\xa2\xc7\x2d\x57\x8c\x53\x71\x15\xa4\xa2\xf6\x91\xc4\x54\x10\x3a\x9e\x74\x3f\xe5\x94\x93\x97\x47\x9d\x01\x89\x3a\x97\x1c\x6c\xcf\xb0\x5d\x5a\xd6\xdb\xcc\xff\xad\x8b\xdb\xf4\xff\x27\x00\x00\xff\xff\x9d\x97\xa4\x07\x54\x1d\x00\x00")

func templatesViewsSnsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSnsHtml,
		"templates/views/sns.html",
	)
}

func templatesViewsSnsHtml() (*asset, error) {
	bytes, err := templatesViewsSnsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/sns.html", size: 7508, mode: os.FileMode(420), modTime: time.Unix(1504116079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/ses.html": templatesViewsSesHtml,
	"templates/views/sns.html": templatesViewsSnsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"ses.html": &bintree{templatesViewsSesHtml, map[string]*bintree{}},
			"sns.html": &bintree{templatesViewsSnsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
