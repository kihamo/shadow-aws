// Code generated by go-bindata.
// sources:
// templates/views/ses.html
// templates/views/sns.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5b\x6f\xdb\xc8\x15\x7e\xf7\xaf\x38\x60\x1d\x50\x2e\x2c\x51\x96\xe3\x5d\x40\xa1\xd4\x7a\xd3\x2c\x36\x40\xd3\xa6\x91\xd1\x87\x0d\x0c\x63\x44\x1e\x89\xe3\x0e\x67\x98\x99\xa1\x2c\xaf\xc0\xff\x5e\x0c\x6f\xa2\xa4\x11\x2d\x6d\x9d\x22\x0e\x96\x2f\x1a\x72\xce\xf5\x3b\x97\xb9\x68\xb5\x82\x10\x67\x94\x23\x38\x81\xe0\x1a\xb9\x76\x20\xcb\x4e\xfc\x90\x2e\x20\x60\x44\xa9\x91\x93\x90\x39\x76\x35\xd5\x0c\x9d\xf1\x09\x00\x40\x73\x32\xff\x7e\xc7\x70\xa6\xcb\xc9\x9c\x20\xba\x1c\x5f\xc7\xe4\x37\xc1\x61\x42\xe3\x84\x21\xbc\x8b\x09\x65\x30\x41\xb9\xa0\x01\xfa\x5e\x74\x59\x4a\xf2\x42\xba\x18\x9f\x94\x3f\x1b\x5a\x03\x86\x44\xce\xe8\xd2\x19\x57\xb3\xab\x15\xd0\x19\xcc\x35\xf4\x24\xc6\x84\x72\xca\xe7\xd0\xef\xf5\xb7\xcd\x95\xe2\xc1\x62\x67\x20\x58\x37\x0e\xbb\x17\x03\x30\x23\x15\x57\xa3\xa5\xea\x5e\x0c\x9a\xa6\x37\x78\x96\x77\x09\xe1\xc8\x1a\xb3\xbb\x14\x4d\x5c\x36\xa8\xa2\xc1\x78\x82\x3c\x84\xc9\x87\x89\xef\x45\x03\x0b\x45\xca\x2a\x31\x9c\x2c\x80\x93\xc5\x94\xc8\xae\xa4\xf3\x48\x43\xae\xf7\x4e\x0b\xc1\xa6\x62\x69\x91\x9e\xf3\x33\x3a\xf6\x49\xc3\x3f\x46\x12\x85\x5d\x46\xf9\x7f\x9c\xb1\x4f\xab\x89\x19\x81\x19\xe9\x06\x11\x2e\xa4\xe0\xdd\x34\x31\x78\xd2\xb1\xef\x91\xb1\xef\x31\x6a\x31\xcb\x4b\x99\xe5\x6b\x5b\x64\x36\xd9\x77\x3f\x6d\x00\x56\x65\x99\x45\xc7\x4c\xc8\xb8\x36\x5b\xc8\xb8\x1b\x09\x49\x7f\x13\x5c\x13\x06\xf9\x3b\x23\x53\x64\xdd\x3c\xd9\x40\x0a\x86\x05\x99\x03\x31\xea\x48\x84\x23\x27\x11\x4a\x3b\x40\xc3\x91\xa3\x90\x87\x5d\x93\x73\x0e\x90\x40\x53\xc1\x47\x8e\x47\x1e\x94\xa7\x50\x39\xc0\xc5\x82\x30\x1a\x12\x8d\x7b\x90\x6d\x18\x4c\x35\xc6\x85\xf2\xb9\x14\x06\x3d\x2b\x47\x11\x0f\x63\x9d\xa1\x1d\x39\x33\x29\x62\x67\x1d\x1a\xae\xa5\x60\x85\xf5\x50\x26\xe2\x65\x95\x87\x97\xd6\x34\xb4\x3d\x3f\x4b\x11\x83\xaf\x12\xc2\xeb\x54\xc7\x2f\x29\x95\x18\x3a\xe3\x3f\xfb\x9e\x99\x68\xb1\xce\xcb\xd5\xb7\x10\xec\x16\xcb\x0f\x95\x8d\x3f\x1c\x6c\xa3\x4f\x79\x92\x6a\xd0\x8f\x09\x8e\x1c\x8d\x4b\xed\x6c\x04\xb4\x84\xa2\x88\x51\x01\x12\x27\x31\x56\xe3\x84\x91\x00\x23\xc1\x42\x94\x23\x07\x97\xc4\xb4\x8e\x8b\xbf\x86\xc2\x54\x7b\x2f\x30\x14\x0b\xc2\x52\x1c\x39\xab\x15\xf4\x4c\x88\x73\x48\xb2\xcc\x81\x0a\x89\x26\x26\x2d\x58\xec\xe4\xe8\x21\x53\xff\x73\x56\x68\xf1\xec\x39\x71\x23\xbe\xa7\x8c\x30\x00\x15\xf9\x60\x46\x4f\x65\xc3\x39\x94\x1f\x07\x6d\x29\x72\x23\x5e\x4e\x82\xa8\x74\x7a\x8f\x81\x7e\xf6\x2c\x99\x14\x72\xbf\xa7\x54\xa9\xa1\x2a\xf2\xa5\x7e\xdd\x8a\x7e\xe5\xf9\x8b\x49\x01\xe3\xfc\xb3\xc7\xff\x6d\xb1\xe6\xe6\xc8\x7e\xf3\x49\xa0\x90\x99\x88\x59\x22\x0f\xc5\xd4\xc0\x01\xa5\x1f\xcd\xea\xff\x40\x43\x1d\x0d\x2f\xfa\xfd\x57\x75\xdf\xc8\xe1\xcb\x7b\x49\x3e\x3a\x2a\xe6\xb5\x09\x22\x31\x5b\x86\x2a\x97\x12\x46\x28\x77\x8a\xdd\x27\x7e\x29\xbb\x8a\x41\xb2\x9c\x81\x2c\x2b\x2d\xc3\x70\xb5\x02\xb3\xe9\xcb\xb2\xf1\x47\x33\x07\x26\x8b\x7d\xaf\x90\x77\xb4\xe2\x48\xc7\xcc\xaa\x37\x9f\xb0\xab\xfd\xe5\xe6\xc3\xdf\x0f\x53\xe8\x7b\x05\xf7\xb7\x57\x03\x31\x2a\x45\xe6\xcf\x5f\x06\x1f\x0a\xb9\xdf\x7c\x05\x98\xa4\x21\x12\x89\xbd\xfb\x49\xf1\xa0\x46\xce\xeb\x2a\xe3\x6b\xb0\x4c\xd2\xd7\x2f\xb6\xbc\xaf\x7a\x62\x05\x43\x96\xf9\x5e\xa5\xea\x6b\x26\x01\xe3\x77\x4a\x30\x1a\x5a\xcf\x0b\x36\x86\xc3\x12\x66\x1f\xd6\x71\xd8\x15\xb3\x99\x42\xdd\xbd\x7c\x0a\xe8\x69\xaa\xb5\xe0\xe5\x82\x23\x51\xe1\x7a\xc5\x99\x6a\x0e\x53\xcd\xbb\x94\xcf\x44\xbd\xaa\x14\x24\xe3\x4f\xe6\xc7\xf7\x0a\xee\x63\x54\xa8\x74\x1a\xd3\x5d\x1d\x2a\x0d\x02\x54\xca\xc9\x0f\x8c\x4f\xcb\x3d\x3e\x22\xbe\x67\x20\x6d\x3d\xa8\x35\x5e\x5b\x0e\xe5\xad\x67\xeb\x27\x52\xfd\x39\x4f\xd6\xff\x4a\x85\x26\x7f\x1c\xab\x0f\x3b\x56\x1b\x3a\xd3\x1c\xbe\x18\xd0\xea\xb5\x33\x42\x03\xc9\xf0\xb2\xdf\x4f\x96\x6f\xd6\x97\x2c\x36\xee\x3d\x40\xad\x81\x66\x54\xe9\x2e\xe5\x8c\x72\x84\x07\x1a\xce\x51\xdf\x69\xc2\xd8\x63\x6b\xbf\xb7\x80\xb4\x41\x90\x1c\xb0\x5e\x36\x1b\x79\x2c\xb8\x8e\x8a\x1a\xa2\x7c\x0e\xb9\xb7\x90\xa0\x84\xc1\x6b\x88\x44\x2a\xcd\x98\x8a\xf0\xa9\x26\x6f\x95\x1d\x88\xd4\x60\xeb\x63\x3c\xf6\x95\x96\x82\xcf\xeb\xfb\x2f\x5c\xea\x6e\x48\xf8\x1c\x65\xd1\x61\x63\xb2\x1c\xbc\xfe\x45\xa4\x72\x52\xac\xc8\xbe\x57\x30\x8c\x01\x63\x42\x99\xf2\x3d\x23\xe4\x00\x23\x7c\xaf\x05\x01\x7b\x92\xd5\xb3\x5f\x0b\xdc\x0f\x64\x09\x66\x09\x01\x49\x34\xfe\x1f\x90\x34\x18\x7e\x22\x1a\x2d\x38\x7a\x0a\x03\x61\xda\xe5\xd7\x85\x73\x4f\xdd\x3e\x59\xa1\xbb\xfd\xf4\x1b\x68\x9b\x13\x4d\x34\x55\x9a\x06\xea\x8f\xde\x79\x5c\xef\x54\x9a\x68\xb5\xd3\x3b\x7f\x1c\x34\x7b\x67\x8b\xce\xbd\xab\x6b\xbd\x71\x6f\x8c\x4e\x1a\x77\xf2\xf7\xaa\xb8\x8e\x57\x81\xa4\x89\x06\x25\x83\x91\xe3\x85\x44\x45\x53\x41\x64\xe8\x11\xa5\x50\x2b\x6f\x81\x3c\x14\x52\x79\xe5\xb5\xa6\x90\xde\x7d\xe3\xa5\x17\x53\xde\xbb\x57\x7f\x59\x8c\x4c\x55\x5d\x27\x09\xa3\x01\x31\xe7\x83\xde\x34\xa5\xcc\xa8\x34\x2e\x14\x1a\xc6\x87\xaa\xc2\x20\x22\x52\x2b\xa3\xa8\x1c\x1e\xa7\xa6\xd6\x53\xec\x8c\xc8\x9a\xdc\xbb\x27\x0b\x52\x4c\x96\x11\x39\xed\x84\x22\x48\x63\xe4\xfa\xac\x27\x91\x84\x8f\x9d\x59\xca\xf3\x5b\x5d\xe8\x9c\xc1\xaa\x46\xb9\x38\x2a\xf5\x50\x4a\x21\x95\x81\xad\x31\x21\x4d\x63\x81\x53\xca\x43\x5c\x9e\xc3\x69\x4e\x03\xc3\x91\x8d\x9a\xe3\x03\x7c\xfc\x87\xd0\x74\xf6\xd8\x59\x6d\x44\x35\xaf\xad\x21\xb8\xef\x0c\x8f\x7b\xbe\x39\x87\x4b\x3d\x04\x77\xb5\xaa\x84\x67\xd9\x36\xc5\x63\x62\x98\xd1\xc2\x1c\xd1\x10\x87\x30\x23\x4c\xe1\xe6\x84\x49\x38\xca\xe7\x43\x70\xa7\x42\x68\xa5\x25\x49\x2e\xdd\x9a\x22\x3b\x7b\xd3\xf0\x11\x79\xb8\xe9\x73\x95\x4f\x5b\xf8\xc4\xf5\xfe\xff\x08\x97\xdf\xf3\x99\xd8\xeb\x71\x43\xa4\xdd\xe7\x72\x87\xfb\x35\xbc\xde\xf1\xf2\xb4\xe3\xfe\xa9\xbe\xfe\x77\xcf\x7a\xc5\xa6\x7b\x4f\xca\x98\x67\x41\x24\x20\x83\x11\x9c\x76\x74\x44\xd5\xd9\x9b\xcd\x5d\x10\x9d\x41\x07\x59\x2f\x24\x9a\x74\xdc\xbc\xa8\xdc\xb3\x6d\x11\xe6\x41\x56\xa9\x6a\xd8\x97\xdb\xbb\x29\x4f\xa2\x4e\x25\x2f\xdc\x7e\xb3\xe1\xd4\x49\xd3\xa2\x7c\xff\xf2\xd6\x54\x16\x8c\xa0\x2a\x31\xca\xa9\xae\x8b\xa1\x37\x47\xfd\x8e\xa1\x19\xfe\xf4\xf8\x3e\xec\xb8\x39\x8b\x7b\x76\x5e\x91\xdf\x44\x18\x63\xc3\x98\xb5\xc8\x9e\x42\xfd\xcf\xfc\x8e\x60\x3b\xdc\x42\x30\x4d\x93\xa1\xc5\x3f\x2d\xe9\x7c\x8e\x72\x08\xae\x39\xd5\x6f\x85\xd2\x3c\xe6\x8c\x41\xb4\x36\x24\xce\x6a\x9a\x0d\x61\x15\x64\xd0\x59\x85\xd9\xab\x33\x67\x13\x90\xf3\x1d\x9d\x53\xb1\xb4\xe9\x54\x91\x78\x18\x82\x96\x29\x5a\xd4\x21\xd1\xa9\x44\x1b\x5b\xce\x4a\x16\x78\xad\xde\xc7\x64\xbe\x97\xe4\x29\x0d\xb5\x81\x65\x0d\x4c\xc8\x02\x2d\x7e\x57\x8f\x39\x8f\x0f\xa1\x8c\x82\x95\x2a\xdb\xf9\x9a\xb5\x01\xa3\x50\x52\x54\x43\xf8\x6c\x09\x46\x51\x57\x09\xb5\x19\x24\x49\x48\x53\xc3\xe7\x5e\x5e\xbd\x72\xcf\xc1\xbd\xba\x7a\xe5\xde\xee\xd2\xe5\xb7\x19\xfb\xc0\xe1\x26\x9a\x7b\x67\x61\x03\xba\x43\x9d\xdd\x35\xc1\x54\xd5\x10\x3e\x5b\x05\xac\x8a\x63\xf7\x10\xca\x8b\x0b\x0d\x59\x76\x5e\xa1\x3c\x41\xae\x5d\x9b\xc4\x1d\xce\xf5\x9f\xc5\x0d\xf6\x4f\xd5\x47\xd7\x62\xe7\xed\x66\x50\x6e\xf7\x17\x69\xbe\x2d\x38\xae\x48\x73\x96\x96\x22\x5d\x8b\x6c\x2d\xd2\xef\xa8\x60\x0a\x44\x9e\xa3\x60\xca\xee\x05\xed\xed\x8b\x2c\xe9\xf6\x4a\x64\x1e\xf3\xf9\xa3\xa0\x5c\xa3\xb4\x0a\x80\xb2\xec\xc0\x98\x1c\x91\x50\x3c\xec\xda\xdc\x6a\x1d\xc3\x39\xf2\xd0\x26\x3a\xaf\x82\xcf\xee\xdf\x90\xd1\x45\x5e\xf3\xee\xb9\xfb\x93\x48\x79\x90\x8f\xde\x8a\x38\xbf\x68\xd6\xe6\xe5\x13\xde\x63\xa0\x95\x7b\xdb\xa6\xc9\xc8\xfb\x55\x88\xf8\xd8\x0c\x51\x9a\x48\xfd\xef\xa2\x74\xf2\x75\x3d\x0f\xcd\xc4\x7c\xed\xfd\x9c\x77\x77\x70\x06\xfd\xfe\x0f\xdd\xfe\x45\xb7\x3f\xb8\xb9\xb8\x1a\xf6\x5f\x0f\xfb\x57\xbf\xf6\x7f\x1c\xf6\xfb\x66\xa3\xea\xb6\x59\xb5\xbc\x5e\x52\x65\x0d\x4d\xd1\xcc\x34\x8d\xb1\x55\xc0\xa3\x4d\xc0\xe1\x3d\xb3\x4c\xb7\x26\xca\xfb\x4c\x99\x92\xed\x1d\x1a\xac\x9b\xd5\xee\x6e\xd2\xc0\x94\x6f\x26\x73\xbc\x20\xcb\x8a\x9d\x56\x31\x6f\xda\x4e\xbd\x4d\xf9\x9c\x6f\x10\x0d\x59\xef\x86\xc6\xa8\x34\x89\x93\x03\xa1\x3d\xaf\x39\x4b\x0f\x1e\xaf\xb5\xc6\x38\xc9\x15\xde\xd6\x1a\xb6\x13\x63\x2f\x0e\x75\x82\xbd\x4c\x10\x4a\xf3\x7f\x9f\xef\xcd\x92\x7a\x99\xee\xaf\x3d\xf8\x7d\x08\x54\x7d\xe4\x85\xba\x5f\x9a\xdf\xe6\xfb\xed\xce\x81\xc1\xfc\xae\x4f\xa0\x35\xdf\x7f\x03\x00\x00\xff\xff\x99\xe5\x39\x8a\x03\x27\x00\x00")

func templatesViewsSesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSesHtml,
		"templates/views/ses.html",
	)
}

func templatesViewsSesHtml() (*asset, error) {
	bytes, err := templatesViewsSesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/ses.html", size: 9987, mode: os.FileMode(420), modTime: time.Unix(1504173411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSnsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\x60\x95\x14\x92\x01\x5b\xba\x66\x6f\x81\xd6\x6b\xab\x08\x76\xd3\x36\x40\xef\x70\xe8\x6e\x9f\x0e\x87\x05\x2d\x8e\x2d\x66\x69\x52\x25\x29\xd9\xa9\xe0\xef\x5e\x90\x94\x64\xc9\x92\x9d\x38\xc9\x1d\x7a\x8b\xf5\xc3\xae\x44\x0e\x67\x7e\xf3\x87\x3f\x0e\x95\xb2\x44\x04\x96\x94\x03\xf2\x12\xc1\x35\x70\xed\xa1\xdd\xee\x62\x46\x68\x81\x12\x86\x95\x9a\x7b\x19\x5e\xc1\x44\x53\xcd\xc0\x8b\x2f\x10\x42\xa8\x3d\x69\xc7\x3f\x33\x58\xea\x6a\xd2\x0a\xa4\x6f\xe2\x9b\x35\xfe\xaf\xe0\xe8\x23\x5d\x67\x0c\xd0\x8f\x42\xd3\x25\x4d\xb0\xa6\x66\x0c\x64\x41\x13\x98\x45\xe9\x9b\x4a\x61\x44\x68\x11\x5f\x54\xff\x75\x8c\x27\x0c\xb0\x5c\xd2\xad\x17\x0f\xcd\x6e\x3f\x67\x98\x03\x1b\xc0\xb5\xfd\xdc\x46\xec\x40\x5d\xc7\x33\x5a\xcf\x2f\x31\x5a\xe2\x49\xae\x40\x2a\xa3\x9a\xc6\x35\x2a\x35\x8b\xd2\xeb\xd6\xaa\x9c\xd5\x4b\x38\x2e\x10\xc7\xc5\x02\xcb\x89\xa4\xab\x54\x23\x6b\xfb\xb3\x16\x82\x2d\xc4\xb6\x65\xc9\xae\x63\x34\x9e\xe1\xc6\x0b\xc1\x18\xce\x14\x4c\x18\xe5\x5f\xbc\x1e\x8c\x24\x85\x42\x0a\x3e\xc9\x33\x87\x65\x16\xe1\x78\x16\x31\xda\x82\x11\xe5\xac\xf5\x76\x2a\x40\xad\x80\xf6\x83\x52\xe7\xb8\xa5\x4b\xe3\x05\x83\x26\x9d\xf6\xc5\xfe\x3b\x51\x5a\xd2\x0c\x08\x22\x58\x63\x3b\x72\xe8\xa2\x4e\x01\x93\xc3\x31\xd9\x1d\xa8\x04\xe3\x9b\x44\xd3\x02\x90\x6a\x82\xac\xd3\x83\x95\xd1\xe1\x52\x23\x33\x60\x60\x21\xc8\x43\x77\xac\x2c\x91\xc4\x7c\x05\xe8\x8a\xe3\x35\x8c\xd1\x55\x65\x05\x4d\xe7\x28\xac\x2d\x9a\xaa\x7e\x02\x52\x12\x97\xa5\xd3\x83\x76\xbb\x59\xa4\x0f\xcd\xf7\x50\x96\x25\x02\x4e\x7a\xda\xa3\x03\x9c\xb3\xc8\x86\xf0\xd1\x7a\x7f\xcd\x8a\xbe\xc9\x32\x56\xed\xb9\xff\xcf\xaa\xae\x54\xd6\xcb\x88\x14\x19\x11\x1b\xee\x0d\x24\x06\xa3\x54\xc2\x72\xee\x5d\x7a\x87\xd2\x13\x2d\x56\x2b\x06\x9e\xad\xd3\xea\xa5\xa5\x0b\x49\x61\xde\x17\xb9\xd6\x82\x7b\x08\x4b\x8a\x27\xb0\xcd\x30\x27\x40\x0c\x52\xa6\xa0\x0f\x7d\x23\x81\x27\xe9\x1e\x76\x1f\xcf\x3e\x80\x0d\x8e\x35\xf0\xbc\x36\x67\x9f\xfb\xcb\xea\x18\x0e\x4e\x74\xfc\xbc\xc7\x05\x56\x89\xa4\x99\x9e\x16\x82\x92\xe0\xbb\x91\x87\x28\x99\x7b\xb8\x95\xd3\x49\x9e\x11\xac\x6b\xcf\xdd\x8b\xec\x8a\x1c\xc1\xd0\x98\x6b\xfc\x5e\xb1\x87\x2c\xa5\x89\xe0\xa8\x79\x9a\x48\x58\x4a\x50\x55\x18\xd0\xbf\xad\xfe\xe3\xc8\x87\xc2\xe4\x26\x86\x1c\xee\x12\x5a\x5f\xee\xf5\x09\xef\x09\x8c\x97\x8a\x02\x64\x97\xfd\xfa\x51\x7f\x02\x0b\x56\xe3\xf1\xdd\xcd\x0f\x7d\xa2\xab\x27\x5b\xbb\x13\xdd\xfc\xeb\xc7\xe3\x82\xef\x41\x56\x87\x27\x20\xd8\x66\x54\xda\x35\xc7\xe5\x6f\x39\xc9\x04\xe5\x7a\x80\x64\x6b\x91\x7f\x62\xa5\x91\x2b\x98\x41\x26\x3e\x97\x77\xe9\x18\x5d\xb5\x62\x64\x89\xb7\x1d\xb3\x01\xf2\x45\x65\x49\x97\x88\x0b\xdd\x59\x19\xde\x72\x13\x7d\xb2\xdb\xd5\xbb\xcb\x18\x90\x5e\x59\x02\x27\xbb\xdd\x20\x63\x37\x99\x84\xad\x9e\x24\xc0\x35\xc8\x23\x65\x5f\x96\x88\x2e\xbb\xf6\xee\xd4\xdd\xcd\x0f\x87\xf0\x1a\xe5\x2a\xc3\xfc\xd4\x0e\x11\x5f\x3c\xa4\xf4\x83\xd9\xf1\x89\x60\x42\x4e\xd1\xe5\xdb\x64\xf1\xe7\xb7\x89\x29\x4e\xb3\xf8\x28\x0e\x60\x0a\x9e\x6d\x56\xc2\x5a\x14\xd0\x33\x4d\xfe\xf2\xf6\xcd\xf7\xcb\xc7\x4d\xf7\x8f\x2b\xe4\xd2\x3e\x58\xc6\xee\x44\x6c\xc7\xec\x46\xf2\xc1\xc3\xb1\x96\x7f\x6a\xec\x5b\x85\x7d\xdb\xd4\xf5\x07\x53\xe6\x47\x02\x73\x08\xe4\x39\x0a\xce\xf6\x7e\x38\x45\xed\xfe\x58\x8a\x95\x04\x75\x8a\x6b\x87\xc4\x27\x0b\x2c\x51\xfb\x65\xa2\xf2\x24\x31\x7a\xea\xbc\xae\x29\x9f\x6c\x28\xd1\xe9\xf4\x1a\xd6\xef\xdc\xd3\x61\x08\xfe\x0e\xba\xda\x32\x3f\x81\x34\xc5\x8f\x76\xbb\x3f\x3e\xc2\xfa\xc7\x75\xbc\x17\xb9\xd5\x70\x82\xe5\x1b\x9e\x7d\xbe\x9f\x1b\x2c\x39\xe5\xab\x73\xfd\xfc\x40\xd5\xcb\x1d\xad\x95\xbc\xc4\xd3\x23\x53\x4f\xdf\x40\x86\x7e\xdd\x71\xfa\xfb\x6f\x32\x3f\x89\x8c\x26\xdf\xda\xcb\xaf\xa4\xbd\xd4\x36\x9b\x47\x1a\x4b\x37\xf9\xad\xa5\x7c\xc9\x1d\x7a\xff\x34\x49\x0c\x05\xf5\x7a\x95\xb3\x6e\xd5\x76\xf3\x0d\x77\x8f\xaf\x72\x9f\x36\x7d\x9d\xcd\xba\xed\xe8\x5c\xfe\xcf\xba\x48\xdb\x25\xa1\x85\x79\xac\x6b\xf8\x5d\xb1\xdd\xc7\x7c\xe1\xb6\xcd\xb7\x3b\xf5\xd7\x43\x7a\xaa\x9d\xd4\x23\xdc\xd7\x91\xf9\x46\x81\xbf\x39\x05\x56\xe3\x71\x7b\x03\x9e\xbe\x36\xd7\xd7\xe0\x57\xbb\xe0\xb6\x4b\xc0\x7d\x5a\x6c\xd7\xc4\x59\xb4\xd8\x5e\x19\xb6\x5d\x7a\xec\x6a\xd5\x5b\x5c\x7b\xf9\x9b\x51\xeb\x5e\xc3\x45\xeb\x6f\x07\x26\x9e\xee\x0f\x07\x86\xb7\xaa\xfd\x16\x11\xac\xd2\x85\xc0\x92\x44\x58\x29\xd0\x2a\x2a\x80\x13\x21\x55\xd4\x54\x80\x0a\x39\xe8\xc9\x42\x45\x89\x72\xa3\x9f\xdc\xe8\x42\x08\xad\xb4\xc4\x59\xb8\xa6\x3c\x4c\x94\xfa\x6b\x31\x2f\x4b\x14\xb6\x3e\x9a\x84\x8b\x9c\x32\x03\xc4\x43\x12\xd8\xdc\xb3\x97\x09\x95\x02\x98\xb2\x7c\x16\x8c\x25\xdd\x02\x31\x9e\x80\xac\x21\xd9\xa1\x7f\xd8\xa1\x17\x63\x1a\x8e\xdc\xbd\x72\x71\x73\x29\x45\x4a\x26\x4f\x47\x1c\xdd\xab\xe8\xfe\x3f\x39\xc8\x87\xb0\x15\x3b\x83\xee\xfe\x24\xb8\x78\x16\x39\x73\xf1\xf3\xec\x9a\xe8\xdc\x9f\xc8\xd7\xaf\x6c\xbd\x95\xa7\x03\x18\xed\x74\x9d\x05\xa4\x41\xa2\x1f\x32\xe8\x7c\xef\x8b\xf6\xa7\x46\x45\x53\x57\x01\x11\x49\xbe\x06\xae\x47\xa1\x04\x4c\x1e\x82\x65\xce\x13\xcb\x0a\xc1\x08\x95\xcd\x26\xba\x0a\xfc\xcb\x81\xcf\xb5\xe3\xcb\x4e\x93\x3d\xbe\x1c\x3a\x7e\xfc\x51\x98\x30\x9a\x7c\x69\x54\x07\xa3\xb2\xb3\x65\xaf\xc2\x4c\x28\x1d\xf8\x97\xfe\x18\x95\x7e\x75\x4c\xf9\x53\x74\x15\xe8\x94\xaa\x91\xad\x87\xa0\x19\x1f\xed\xc6\x68\xaf\x09\x95\x3d\x6e\xd9\x50\x4e\xc4\x26\x64\xa2\x8a\x91\x04\x26\x30\x09\x46\xef\x3a\x92\xbb\xd1\xbb\x8b\xce\x80\x04\x9d\x4b\x8e\xec\x89\xbf\x17\xed\x88\x5d\x85\x4b\xbe\xaf\xce\xdb\xad\x0e\xf1\x92\xff\x8d\x32\x0d\x92\xf2\x55\x98\xe5\x2a\x0d\x3a\x3a\x1b\x9c\x0a\xb4\xa6\x7c\xa5\xc6\xf6\xc0\x70\xff\xde\x71\x02\xdb\x31\x92\x62\x33\x46\xd5\xe1\x31\xea\x7b\x43\x97\xa8\x59\x1d\x2a\x6b\xf8\x8e\xa0\xf9\x7c\x8e\xfc\x76\x42\xfc\xa1\x48\x98\x5f\x81\x25\x2a\xd0\xdc\x66\x30\x01\xa9\x27\x0a\x18\x24\x5a\x48\x7f\x14\x16\x98\x05\x87\x61\x68\xdb\x2d\x9c\x1d\xfb\xa1\x16\xc8\x51\x13\xb5\xf8\x1f\xa4\xd8\xfc\x7c\xfd\x4b\xc8\x80\xaf\x74\x7a\x4a\xfa\x78\xbc\x0f\x7f\xbb\x61\x74\xb5\x67\x04\xcd\xd1\x07\xac\x21\xcc\xb0\x54\x10\x38\x00\xc7\x5c\x6a\x70\x92\x5f\x1d\x5b\xa5\xc0\x42\xe3\x62\x13\x8c\x50\x3c\x47\x64\x58\x55\xff\xbb\xcd\x80\xe2\x4a\xa1\x96\x79\xb7\xc1\xda\x2f\xee\x14\xea\xc1\x76\xf5\x47\xe1\x87\xba\x6c\x83\xae\xeb\x89\x60\xf9\x9a\xab\x29\xfa\xb9\x67\x73\x38\x46\xa6\x74\xa7\xe8\xbb\x3e\xe8\xf1\x59\x0a\xfe\xf4\x52\x05\xd7\x7d\x71\x64\x03\xc5\x09\xc8\x29\xda\xf3\x98\xa1\x8d\xc7\x4a\xd7\xc8\x9c\x57\xb7\x66\xc5\x27\xf1\x51\x9b\x9d\xef\x4c\xbc\xa4\x50\x7c\xff\xa9\xa5\x71\x5e\x90\xde\x0c\x07\x49\x48\x02\xd2\x14\xc3\xd4\xd5\xf8\x4b\xcd\x7c\xff\x5a\xb9\x38\x33\xb8\x43\x5b\xa7\xfd\xf6\x4b\x17\x17\xe5\x54\xbf\x17\xeb\x8c\x81\x86\x36\xaa\x21\x44\xe6\xe8\x09\x71\x46\x83\x51\x58\x6d\x91\xc0\x50\x4b\x08\x05\xc8\x87\xe0\xe4\x01\x84\x1c\x39\x1d\x75\xd2\xe9\x43\x73\x6b\x63\x38\x72\xe6\xe7\x88\xda\x51\xf7\xac\x7a\xa9\xbe\x32\x2f\x99\xc0\x7a\x6a\xef\xe3\xee\xda\xd7\x61\x76\xdb\x0c\xd8\xe7\xd8\x1f\x9d\xac\xe5\x10\x67\x19\x70\xf2\x49\x04\x57\x81\x43\x15\xba\x5e\x24\x18\x8d\x1e\x59\x29\x78\xe0\x27\xa9\xb9\x51\xf8\x8f\x9c\xc7\xc3\xee\x87\x0a\xb0\x4c\xd2\xc0\xf7\xc7\x96\xd5\xc6\xae\x12\x47\x21\x91\x78\x73\x78\x58\x1f\xfe\x76\x4f\x01\x67\x7a\x8e\x36\xb6\x93\x85\x57\xff\x20\x54\x5a\x64\x3f\x49\x91\xe1\x15\x76\x2e\x3d\x06\xe5\xc8\x69\xe3\x32\x50\x45\x38\xf0\x67\xc2\x5d\xb6\x0a\xcc\x72\xd3\x95\x31\xe6\xc5\x1f\x53\xb1\x41\x98\xb1\x59\xe4\x26\x63\xff\x88\xb1\xd3\xba\xaa\xf3\xd9\x8b\x6f\xdd\xc3\x49\x75\xbb\xc3\x3e\xe8\xe2\x70\xc6\xfc\xbf\xef\x26\x9b\x4e\xff\x7f\x01\x00\x00\xff\xff\x68\x20\x91\x86\x5e\x25\x00\x00")

func templatesViewsSnsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSnsHtml,
		"templates/views/sns.html",
	)
}

func templatesViewsSnsHtml() (*asset, error) {
	bytes, err := templatesViewsSnsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/sns.html", size: 9566, mode: os.FileMode(420), modTime: time.Unix(1521214354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/ses.html": templatesViewsSesHtml,
	"templates/views/sns.html": templatesViewsSnsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"ses.html": &bintree{templatesViewsSesHtml, map[string]*bintree{}},
			"sns.html": &bintree{templatesViewsSnsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
